{"version":3,"file":"bundle.js","mappings":"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;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB,kDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;;AAEO;AACP,oBAAoB,kDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,+CAAgB,+BAA+B,+CAAgB,+BAA+B,+CAAgB;AAC/I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,uEAAuE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB;AAC/zC;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;ACr3DP;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB;AACxB;AACA;;AAEA;AACA;;AAEA;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AAC7S;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,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AAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,UAAU,8CAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB;AACnI;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","sources":["webpack://platformer-gen-2d/./src/globals.ts","webpack://platformer-gen-2d/./src/rendering/gl/OpenGLRenderer.ts","webpack://platformer-gen-2d/./node_modules/gl-matrix/esm/mat4.js","webpack://platformer-gen-2d/./node_modules/gl-matrix/esm/common.js","webpack://platformer-gen-2d/./node_modules/gl-matrix/esm/vec4.js","webpack://platformer-gen-2d/./src/engine/GameEngine.ts","webpack://platformer-gen-2d/./src/scene/Terrain.ts","webpack://platformer-gen-2d/./src/scene/SceneAttributes.ts","webpack://platformer-gen-2d/./src/constants.ts","webpack://platformer-gen-2d/./node_modules/gl-matrix/esm/vec2.js","webpack://platformer-gen-2d/./src/geometry/Tile.ts","webpack://platformer-gen-2d/./src/rendering/gl/Drawable.ts","webpack://platformer-gen-2d/./src/geometry/Background.ts","webpack://platformer-gen-2d/./src/Camera.ts","webpack://platformer-gen-2d/./src/rendering/gl/ShaderProgram.ts","webpack://platformer-gen-2d/./src/rendering/Texture2D.ts","webpack://platformer-gen-2d/./src/LevelGenerator/LevelGenerator.ts","webpack://platformer-gen-2d/./src/LevelGenerator/RhythmGroupGenerator.ts","webpack://platformer-gen-2d/./src/LevelGenerator/RhythmGroup.ts","webpack://platformer-gen-2d/./src/LevelGenerator/GeometryGenerator.ts","webpack://platformer-gen-2d/./src/scene/Spike.ts","webpack://platformer-gen-2d/./src/engine/GameObject.ts","webpack://platformer-gen-2d/./src/scene/Coin.ts","webpack://platformer-gen-2d/./src/scene/Particle.ts","webpack://platformer-gen-2d/./src/scene/Checkpoint.ts","webpack://platformer-gen-2d/./src/scene/Gem.ts","webpack://platformer-gen-2d/./src/scene/Baddie.ts","webpack://platformer-gen-2d/./src/shaders/tile-vert.glsl","webpack://platformer-gen-2d/./src/shaders/tile-frag.glsl","webpack://platformer-gen-2d/./src/shaders/background-vert.glsl","webpack://platformer-gen-2d/./src/shaders/background-frag.glsl","webpack://platformer-gen-2d/./src/scene/Player.ts","webpack://platformer-gen-2d/./node_modules/stats-js/build/stats.min.js","webpack://platformer-gen-2d/webpack/bootstrap","webpack://platformer-gen-2d/webpack/runtime/define property getters","webpack://platformer-gen-2d/webpack/runtime/hasOwnProperty shorthand","webpack://platformer-gen-2d/webpack/runtime/make namespace object","webpack://platformer-gen-2d/webpack/runtime/publicPath","webpack://platformer-gen-2d/./src/main.ts"],"sourcesContent":["export var gl: WebGL2RenderingContext;\nexport function setGL(_gl: WebGL2RenderingContext) {\n  gl = _gl;\n}\n","import {mat4, vec4, mat3} from 'gl-matrix';\nimport Drawable from './Drawable';\nimport Camera from '../../Camera';\nimport {gl} from '../../globals';\nimport ShaderProgram from './ShaderProgram';\n\n// In this file, `gl` is accessible because it is imported above\nclass OpenGLRenderer {\n    constructor(public canvas: HTMLCanvasElement) {\n        gl.enable(gl.DEPTH_TEST);\n    }\n  \n    setClearColor(r: number, g: number, b: number, a: number) {\n        gl.clearColor(r, g, b, a);\n    }\n  \n    setSize(width: number, height: number) {\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n  \n    clear() {\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n  \n    render(camera: Camera, prog: ShaderProgram, drawables: Array<Drawable>) {\n        let model = mat4.create();\n        let viewProj = mat4.create();\n        let color = vec4.fromValues(1, 0, 0, 1);\n    \n        prog.setCameraPos(camera.position);\n        mat4.identity(model);\n        mat4.multiply(viewProj, camera.projectionMatrix, camera.viewMatrix);\n        prog.setModelMatrix(model);\n        prog.setViewProjMatrix(viewProj);\n\n        for (let drawable of drawables) {\n            prog.draw(drawable);\n        }\n    }\n};\n\nexport default OpenGLRenderer;\n","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import {vec2} from 'gl-matrix';\nimport GameObject from './GameObject';\nimport Terrain from '../scene/Terrain';\nimport Coin from '../scene/Coin';\nimport Particle from '../scene/Particle';\nimport Baddie from '../scene/Baddie';\nimport Tile from '../geometry/Tile';\nimport Background from '../geometry/Background';\nimport {gl} from '../globals';\nimport Camera from '../Camera';\nimport OpenGlRenderer from '../rendering/gl/OpenGLRenderer';\nimport ShaderProgram, {Shader} from '../rendering/gl/ShaderProgram';\nimport Texture2D from '../rendering/Texture2D';\nimport LevelGenerator from '../LevelGenerator/LevelGenerator';\nimport sceneAttributes from '../scene/SceneAttributes';\n\nimport spriteSheet from '../assets/sprites.png';\nimport backgrounds from '../assets/backgrounds.png';\n\nclass GameEngine {\n\n    private static engine: GameEngine;\n\n    static getEngine() {\n        if (GameEngine.engine) {\n            return GameEngine.engine;\n        }\n        else {\n            let tile: Tile = new Tile();\n            let background: Background = new Background();\n            tile.create();\n            background.create()\n            GameEngine.engine = new GameEngine(tile, background);\n            return GameEngine.engine;\n        }\n    }\n\n    private gameObjects: GameObject[];\n    terrainObjects: Terrain[];\n    private collidableObjects: GameObject[];\n    private lastTick: number;\n    private tile: Tile;\n    private background: Background;\n    private spriteShader: ShaderProgram;\n    private backgroundShader: ShaderProgram;\n    private renderer: OpenGlRenderer;\n    private camera: Camera;\n    private downkeys: Set<string>\n    private ticks: number;\n    private win: boolean = false;\n\n    private constructor(_tile: Tile, _background: Background) {\n        this.gameObjects = [];\n        this.terrainObjects = [];\n        this.collidableObjects = [];\n        this.tile = _tile;\n        this.background = _background;\n        this.camera = new Camera(vec2.fromValues(0, -3), 20);\n        this.downkeys = new Set();\n        this.ticks = 0;\n\n        this.spriteShader = new ShaderProgram([\n            new Shader(gl.VERTEX_SHADER, require('../shaders/tile-vert.glsl')),\n            new Shader(gl.FRAGMENT_SHADER, require('../shaders/tile-frag.glsl')),\n        ]);\n        let spriteTex: Texture2D = new Texture2D(spriteSheet, 0)\n        this.spriteShader.setSpriteTex(spriteTex);\n\n        this.backgroundShader = new ShaderProgram([\n            new Shader(gl.VERTEX_SHADER, require('../shaders/background-vert.glsl')),\n            new Shader(gl.FRAGMENT_SHADER, require('../shaders/background-frag.glsl')),\n        ])\n        let backgroundTex: Texture2D = new Texture2D(backgrounds, 1);\n        this.backgroundShader.setSpriteTex(backgroundTex);\n\n        window.addEventListener(\"keydown\", (keyEvent) => {\n            if (!this.downkeys.has(keyEvent.key)) {\n                this.gameObjects.forEach((go: GameObject) => {go.onKeyDown(keyEvent.key)});\n            }\n            this.downkeys.add(keyEvent.key);\n        });\n        window.addEventListener(\"keyup\", (keyEvent) => {\n            this.downkeys.delete(keyEvent.key);\n            this.gameObjects.forEach((go: GameObject) => {go.onKeyUp(keyEvent.key)});\n        });\n    }\n\n    generateLevel() {\n        let terrain: Terrain = new Terrain();\n        this.setTerrain(terrain);\n        let densities = [];\n        if (sceneAttributes.rhythmType === 3) {\n            densities = [0.5, 0, 0.5];\n        }\n        else {\n            for (let i = 0; i < 3; i++) {\n                densities.push(sceneAttributes.rhythmType === i ? 1 : 0);\n            }\n        }\n        let levelGen = new LevelGenerator(\n            sceneAttributes.numberOfGroups,\n            terrain,\n            sceneAttributes.rhythmGroupLength,\n            sceneAttributes.rhythmGroupLength,\n            sceneAttributes.levelDensity,\n            1.0,\n            densities\n        );\n        levelGen.generateRhythms();\n        let topTiles = levelGen.generateGeometry();\n        levelGen.addCoins(topTiles);\n    }\n\n    setRenderer(renderer: OpenGlRenderer) {\n        this.renderer = renderer;\n    }\n\n    setTerrain(terrain: Terrain) {\n        this.terrainObjects.push(terrain);\n    }\n\n    getCamera(): Camera {\n        return this.camera;\n    }\n\n    onWin() {\n        this.win = true;\n    }\n\n    drawGameObjects() {\n        let tilePositions: vec2[] = [];\n        let tileUvs: vec2[] = [];\n        let tileMirrors: boolean[] = [];\n        let tileScales: number[] = [];\n        for (let i = 0; i < this.gameObjects.length; i++) {\n            let go: GameObject = this.gameObjects[this.gameObjects.length - i - 1];\n            tilePositions.push(go.getPosition());\n            tileUvs.push(go.getSpriteUv());\n            tileMirrors.push(go.facingLeft());\n            tileScales.push(go.size);\n        }\n        for (let ter of this.terrainObjects) {\n            for (let x of ter.tiles.keys()) {\n                for (let y of ter.tiles.get(x)) {\n                    let horCamDist = Math.abs(x + this.camera.position[0]);\n                    let verCamDist = Math.abs(y + this.camera.position[1]);\n                    if (horCamDist > this.camera.getWidth() / 2 + 1 ||\n                        verCamDist > this.camera.getHeight() / 2 + 1\n                    ) {\n                        continue;\n                    }\n                    tilePositions.push(vec2.fromValues(x, y));\n                    tileUvs.push(ter.getSpritePosition(x, y));\n                    tileMirrors.push(false);\n                    tileScales.push(1);\n                }\n            }\n        }\n\n        let totalPositions: vec2\n        this.tile.setInstanceVBOs(tilePositions, tileUvs, tileMirrors, tileScales);\n        this.tile.setNumInstances(tilePositions.length);\n\n        this.backgroundShader.setWin(this.win);\n        this.spriteShader.setWin(this.win);\n\n        this.renderer.render(this.camera, this.backgroundShader, [this.background]);\n        this.renderer.render(this.camera, this.spriteShader, [this.tile]);\n    }\n\n    // Only call from GameObject class\n    addGameObject(go: GameObject) {\n        if (this.gameObjects.indexOf(go) < 0) {\n            this.gameObjects.push(go);\n            if (go.isCollidable() && !go.isPassive()) {\n                this.collidableObjects.push(go);\n            }\n        }\n    }\n\n    // Only call from the GameObject cass\n    destroyGameObject(go: GameObject) {\n        let idx = this.gameObjects.indexOf(go);\n        if (idx >= 0) {\n            this.gameObjects.splice(idx, 1);\n        }\n        idx = this.collidableObjects.indexOf(go);\n        if (idx >= 0) {\n            this.collidableObjects.splice(idx, 1);\n        }\n    }\n\n    getCollidableObjects() {\n        return this.collidableObjects;\n    }\n\n    private updateGameObjects(deltaTime: number) {\n\n        for (let go of this.gameObjects) {\n            if (!this.win) {\n                go.physicsUpdate(deltaTime);\n            }\n            go.onUpdate(deltaTime);\n            for (let key of this.downkeys) {\n                go.onKeyPress(key);\n            }\n        }\n\n        for (let go1 of this.gameObjects) {\n            if (go1.isPassive() || !go1.isCollidable) {\n                continue;\n            }\n            for (let go2 of this.gameObjects) {\n                if (!go2.isCollidable || go1 === go2) {\n                    continue;\n                }\n                go1.checkObjectCollisions(go2);\n            }\n        }\n\n        this.camera.update();\n    }\n\n    startGame() {\n        this.lastTick = Date.now();\n    }\n\n    tick() {\n        this.ticks++;\n        this.backgroundShader.setTime(this.ticks);\n        this.spriteShader.setTime(this.ticks);\n        let curTime = Date.now();\n        let deltaTime = curTime - this.lastTick;\n        this.lastTick = curTime;\n        this.updateGameObjects(deltaTime / 1000.0);\n    }\n}\n\nexport default GameEngine;","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from '../scene/SceneAttributes';\nimport {spriteCoordinates} from '../constants';\n\nfunction random1(p: vec2, seed: vec2) : number {\n    let fract = (n: number) => n - Math.floor(n);\n    return fract(Math.sin(vec2.dot(\n        vec2.add(vec2.create(), p, seed),\n        vec2.fromValues(127.1, 311.7))\n    ) * 41352.5245);\n} \n\nclass Terrain {\n\n    tiles: Map<number, Set<number>>;\n    randomOffset: number;\n\n    constructor() {\n        this.tiles = new Map();\n        this.randomOffset = Math.random();\n    }\n\n    static makeTestTerrain(): Terrain {\n        let terrain: Terrain = new Terrain();\n        for (let i = -2; i < 15; i++) {\n            if (i < 4 || i > 7) {\n                terrain.setTileAt([i, -3]);\n                terrain.setTileAt([i, -4]);\n            }\n            if (i > 9) {\n                terrain.setTileAt([i, -2]);\n            }\n            if (i > 11) {\n                terrain.setTileAt([i, -1]);\n                terrain.setTileAt([i, 0]);\n            }\n        }\n\n        terrain.setTileAt([18, 0]);\n        terrain.setTileAt([23, 2]);\n        return terrain;\n    }\n\n    tileAt(x: number, y: number): boolean {\n        x = Math.floor(x);\n        y = Math.floor(y);\n        if (this.tiles.has(x)) {\n            return this.tiles.get(x).has(y);\n        }\n        return false;\n    }\n\n    setTileAt(pos: number[] | vec2) {\n        let [x, y] = pos;\n        x = Math.floor(x);\n        y = Math.floor(y);\n        if (this.tiles.has(x)) {\n            this.tiles.get(x).add(y);\n        }\n        else {\n            this.tiles.set(x, new Set([y]));\n        }\n    }\n\n    setColumnAt(pos: number[] | vec2) {\n        let [x, y] = pos;\n        for (let i = sceneAttributes.deathHeight - 1; i <= y; i++) {\n            this.setTileAt([x, i]);\n        }\n    }\n\n    getSpritePosition(x: number, y: number): vec2 {\n        x = Math.floor(x);\n        y = Math.floor(y);\n        let tl = this.tileAt(x - 1, y + 1);\n        let tc = this.tileAt(x + 0, y + 1);\n        let tr = this.tileAt(x + 1, y + 1);\n        let cl = this.tileAt(x - 1, y + 0);\n        let cr = this.tileAt(x + 1, y + 0);\n        let bl = this.tileAt(x - 1, y - 1);\n        let bc = this.tileAt(x + 0, y - 1);\n        let br = this.tileAt(x + 1, y - 1);\n\n        if (!cr && !cl && !tc && !bc) {\n            return spriteCoordinates.SPRITE_TERRAIN_SINGLE;\n        }\n        else if (tc && !cr && !cl) {\n            return spriteCoordinates.SPRITE_TERRAIN_COLUMN;\n        }\n        else if (!cr && !cl) {\n            return spriteCoordinates.SPRITE_TERRAIN_CAP;\n        }\n        else if (!tc && cl && cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_TOP;\n        }\n        else if (!bc && cl && cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_BOTTOM;\n        }\n        else if (!cr && tc && bc) {\n            return spriteCoordinates.SPRITE_TERRAIN_RIGHT;\n        }\n        else if (!cl && tc && bc) {\n            return spriteCoordinates.SPRITE_TERRAIN_LEFT;\n        }\n        else if (!tc && !cl) {\n            return spriteCoordinates.SPRITE_TERRAIN_TOP_LEFT;\n        }\n        else if (!tc && !cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_TOP_RIGHT;\n        }\n        else if (!br && !bc && !cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_BOTTOM_RIGHT;\n        }\n        else if (!bl && !bc && !cl) {\n            return spriteCoordinates.SPRITE_TERRAIN_BOTTOM_LEFT;\n        }\n        else if (!tl && tc && cl && bc && cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_LEFT_INNER_CORNER;\n        }\n        else if (!tr && tc && cl && bc && cr) {\n            return spriteCoordinates.SPRITE_TERRAIN_RIGHT_INNER_CORNER;\n        }\n        else {\n            let tileRng = random1(vec2.fromValues(x, y), vec2.fromValues(0.1324, 0.4234 + this.randomOffset));\n            if (tileRng < 0.05) {\n                return spriteCoordinates.SPRITE_TERRAIN_MIDDLE_ALT_1;\n            }\n            else if (tileRng < 0.10) {\n                return spriteCoordinates.SPRITE_TERRAIN_MIDDLE_ALT_2;\n            }\n            else if (tileRng < 0.15) {\n                return spriteCoordinates.SPRITE_TERRAIN_MIDDLE_ALT_3;\n            }\n            else if (tileRng < 0.20) {\n                return spriteCoordinates.SPRITE_TERRAIN_MIDDLE_ALT_4;\n            }\n            else {\n                return spriteCoordinates.SPRITE_TERRAIN_MIDDLE;\n            }\n        }\n    }\n}\n\nexport default Terrain;","let sceneAttributes = {\n    rhythmType: 0,\n    rhythmGroupLength: 20,\n    levelDensity: 1,\n    numberOfGroups: 3,\n\n    gravity: 2.5,\n    playerSpeed: 9.5,\n    playerJump: 5.5,\n    maxJumpHold: 0.4,\n    maxObjectSpeed: 55,\n    deathHeight: -25,\n}\n\nexport default sceneAttributes","import {vec2} from 'gl-matrix';\n\nexport const spriteCoordinates = {\n\n    // Terrain\n    SPRITE_TERRAIN_TOP_LEFT:           vec2.fromValues(0, 0),\n    SPRITE_TERRAIN_TOP:                vec2.fromValues(1, 0),\n    SPRITE_TERRAIN_TOP_RIGHT:          vec2.fromValues(2, 0),\n    SPRITE_TERRAIN_LEFT:               vec2.fromValues(0, 1),\n    SPRITE_TERRAIN_MIDDLE:             vec2.fromValues(1, 1),\n    SPRITE_TERRAIN_MIDDLE_ALT_1:       vec2.fromValues(5, 2),\n    SPRITE_TERRAIN_MIDDLE_ALT_2:       vec2.fromValues(5, 3),\n    SPRITE_TERRAIN_MIDDLE_ALT_3:       vec2.fromValues(6, 3),\n    SPRITE_TERRAIN_MIDDLE_ALT_4:       vec2.fromValues(6, 1),\n    SPRITE_TERRAIN_RIGHT:              vec2.fromValues(2, 1),\n    SPRITE_TERRAIN_BOTTOM_LEFT:        vec2.fromValues(0, 2),\n    SPRITE_TERRAIN_BOTTOM:             vec2.fromValues(1, 2),\n    SPRITE_TERRAIN_BOTTOM_RIGHT:       vec2.fromValues(2, 2),\n    SPRITE_TERRAIN_SINGLE:             vec2.fromValues(4, 0),\n    SPRITE_TERRAIN_LEFT_INNER_CORNER:  vec2.fromValues(5, 1),\n    SPRITE_TERRAIN_RIGHT_INNER_CORNER: vec2.fromValues(6, 2),\n    SPRITE_TERRAIN_COLUMN:             vec2.fromValues(7, 1),\n    SPRITE_TERRAIN_CAP:                vec2.fromValues(7, 0),\n\n    // Entities\n    SPRITE_PICKUP:         vec2.fromValues(0, 3),\n    SPRITE_SPIKE:          vec2.fromValues(3, 2),\n    SPRITE_PLATFORM_LEFT:  vec2.fromValues(5, 4),\n    SPRITE_PLATFORM_RIGHT: vec2.fromValues(6, 4),\n\n    // Player\n    SPRITE_PLAYER_STAND:  vec2.fromValues(0, 7),\n    SPRITE_PLAYER_JUMP:   vec2.fromValues(1, 7),\n    SPRITE_PLAYER_WALK_1: vec2.fromValues(2, 7),\n    SPRITE_PLAYER_WALK_2: vec2.fromValues(3, 7),\n    SPRITE_PLAYER_CROUCH: vec2.fromValues(4, 7),\n    SPRITE_PLAYER_IDLE1:  vec2.fromValues(5, 7),\n    SPRITE_PLAYER_IDLE2:  vec2.fromValues(6, 7),\n    SPRITE_PLAYER_DEATH:  vec2.fromValues(7, 7),\n\n    // Coin\n    SPRITE_COIN_1: vec2.fromValues(0, 3),\n    SPRITE_COIN_2: vec2.fromValues(1, 3),\n    SPRITE_COIN_3: vec2.fromValues(2, 3),\n    SPRITE_COIN_4: vec2.fromValues(0, 4),\n    SPRITE_COIN_5: vec2.fromValues(1, 4),\n    SPRITE_GEM:    vec2.fromValues(6, 5),\n\n    // Particles\n    SPRITE_Z:       vec2.fromValues(6, 6),\n    SPRITE_POFF:    vec2.fromValues(7, 6),\n    SPRITE_SPARKLE: vec2.fromValues(5, 6),\n\n    // Enemy\n    SPRITE_BADDIE_1: vec2.fromValues(0, 5),\n    SPRITE_BADDIE_2: vec2.fromValues(1, 5),\n\n    // Checkpoint\n    SPRITE_FLAG_1: vec2.fromValues(2, 4),\n    SPRITE_FLAG_2: vec2.fromValues(3, 4),\n    SPRITE_FLAG_3: vec2.fromValues(4, 4),\n    SPRITE_CHECK_1: vec2.fromValues(2, 5),\n    SPRITE_CHECK_2: vec2.fromValues(3, 5),\n    SPRITE_CHECK_3: vec2.fromValues(4, 5),\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import {vec2, vec3} from 'gl-matrix';\nimport Drawable from '../rendering/gl/Drawable';\nimport {gl} from '../globals';\n\nclass Tile extends Drawable {\n    indices: Uint32Array;\n    positions: Float32Array;\n    uvs: Float32Array;\n    offsets: Float32Array;\n    mirrors: Int32Array;\n    scales: Float32Array;\n\n    constructor() {\n        super();\n    }\n\n    create() {\n        this.indices = new Uint32Array([0, 1, 2, 0, 2, 3]);\n        this.positions = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1\n        ]);\n\n        this.count = this.indices.length;\n\n        this.generateIdx();\n        this.generatePos();\n        this.generateUV();\n        this.generateOff();\n        this.generateMir();\n        this.generateScale();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\n        gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.STATIC_DRAW);\n    }\n\n    isInstanced() {\n        return true;\n    }\n\n    setInstanceVBOs(posOffsets: vec2[], uvOffsets: vec2[], mirrors: boolean[], scales: number[]) {\n        let posOffsetArray = [];\n        let uvOffsetArray = [];\n        let mirrorArray = [];\n        for (let posOffset of posOffsets) {\n            posOffsetArray.push(posOffset[0], posOffset[1]);\n        }\n        for (let uvOffset of uvOffsets) {\n            uvOffsetArray.push(uvOffset[0], uvOffset[1]);\n        }\n        for (let mirror of mirrors) {\n            mirrorArray.push(mirror ? 1 : 0);\n        }\n        this.offsets = new Float32Array(posOffsetArray);\n        this.uvs = new Float32Array(uvOffsetArray);\n        this.mirrors = new Int32Array(mirrorArray);\n        this.scales = new Float32Array(scales);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufOff);\n        gl.bufferData(gl.ARRAY_BUFFER, this.offsets, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufMir);\n        gl.bufferData(gl.ARRAY_BUFFER, this.mirrors, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufScale);\n        gl.bufferData(gl.ARRAY_BUFFER, this.scales, gl.STATIC_DRAW);\n    }\n}\n\nexport default Tile;","import {gl} from '../../globals';\n\nabstract class Drawable {\n    count: number = 0;\n\n    bufIdx: WebGLBuffer;\n    bufPos: WebGLBuffer;\n    bufOff: WebGLBuffer;\n    bufUV: WebGLBuffer;\n    bufMir: WebGLBuffer;\n    bufScale: WebGLBuffer;\n  \n    idxGenerated: boolean = false;\n    posGenerated: boolean = false;\n    uvGenerated: boolean = false;\n    offGenerated: boolean = false;\n    mirGenerated: boolean = false;\n    scaleGenerated: boolean = false;\n  \n    numInstances: number = 0; // How many instances of this Drawable the shader program should draw\n  \n    abstract create() : void;\n\n    abstract isInstanced() : boolean;\n  \n    destroy() {\n        gl.deleteBuffer(this.bufIdx);\n        gl.deleteBuffer(this.bufPos);\n        gl.deleteBuffer(this.bufOff);\n        gl.deleteBuffer(this.bufUV);\n        gl.deleteBuffer(this.bufMir);\n        gl.deleteBuffer(this.bufScale);\n    }\n  \n    generateIdx() {\n        this.idxGenerated = true;\n        this.bufIdx = gl.createBuffer();\n    }\n  \n    generatePos() {\n        this.posGenerated = true;\n        this.bufPos = gl.createBuffer();\n    }\n  \n    generateUV() {\n        this.uvGenerated = true;\n        this.bufUV = gl.createBuffer();\n    }\n\n    generateOff() {\n        this.offGenerated = true;\n        this.bufOff = gl.createBuffer();\n    }\n\n    generateMir() {\n        this.mirGenerated = true;\n        this.bufMir = gl.createBuffer();\n    }\n\n    generateScale() {\n        this.scaleGenerated = true;\n        this.bufScale = gl.createBuffer();\n    }\n  \n    bindIdx(): boolean {\n        if (this.idxGenerated) {\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\n        }\n        return this.idxGenerated;\n    }\n  \n    bindPos(): boolean {\n        if (this.posGenerated) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\n        }\n        return this.posGenerated;\n    }\n  \n    bindUV(): boolean {\n        if (this.uvGenerated) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\n        }\n        return this.uvGenerated;\n    }\n\n    bindOff(): boolean {\n        if (this.offGenerated) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufOff);\n        }\n        return this.offGenerated;\n    }\n\n    bindMir(): boolean {\n        if (this.mirGenerated) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufMir);\n        }\n        return this.mirGenerated;\n    }\n\n    bindScale(): boolean {\n        if (this.scaleGenerated) {\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufScale);\n        }\n        return this.scaleGenerated;\n    }\n  \n    elemCount(): number {\n      return this.count;\n    }\n  \n    drawMode(): GLenum {\n      return gl.TRIANGLES;\n    }\n  \n    setNumInstances(num: number) {\n      this.numInstances = num;\n    }\n};\n\nexport default Drawable;\n","import {vec2, vec3} from 'gl-matrix';\nimport Drawable from '../rendering/gl/Drawable';\nimport {gl} from '../globals';\n\nclass Background extends Drawable {\n    indices: Uint32Array;\n    positions: Float32Array;\n    uvs: Float32Array;\n    offsets: Float32Array;\n    mirrors: Int32Array;\n    scales: Float32Array;\n\n    constructor() {\n        super();\n        this.numInstances = 1;\n    }\n\n    create() {\n        this.indices = new Uint32Array([0, 1, 2, 0, 2, 3]);\n        this.positions = new Float32Array([\n            -1.0, -1.0,\n             1.0, -1.0,\n             1.0,  1.0,\n            -1.0,  1.0\n        ]);\n        this.uvs = new Float32Array([\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0\n        ]);\n        this.count = this.indices.length;\n\n        this.generateIdx();\n        this.generatePos();\n        this.generateUV();\n\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIdx);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n    \n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufPos);\n        gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.STATIC_DRAW);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\n        gl.bufferData(gl.ARRAY_BUFFER, this.uvs, gl.STATIC_DRAW);\n    }\n\n    isInstanced() {\n        return false;\n    }\n}\n\nexport default Background;","import {vec2, mat4} from 'gl-matrix';\nimport GameObject from './engine/GameObject';\nimport sceneAttributes from './scene/SceneAttributes';\nimport Player from './scene/Player';\n\nclass Camera {\n    controls: any;\n    projectionMatrix: mat4 = mat4.create();\n    viewMatrix: mat4 = mat4.create();\n    aspectRatio: number = 1;\n    position: vec2 = vec2.create();\n    child: Player = null;\n    width: number;\n    height: number;\n  \n    constructor(position: vec2, height: number) {\n        this.position = vec2.fromValues(position[0], position[1]);\n        this.height = height;\n        this.width = height;\n    }\n  \n    setAspectRatio(aspectRatio: number) {\n        this.aspectRatio = aspectRatio;\n        this.width = this.height * aspectRatio;\n    }\n\n    getWidth(): number {\n        return this.width;\n    }\n\n    getHeight(): number {\n        return this.height;\n    }\n  \n    updateProjectionMatrix() {\n        let w = this.width / 2;\n        let h = this.height / 2;\n        mat4.ortho(this.projectionMatrix, -w, w, -h, h, -1, 1);\n    }\n\n    setPosition(newPos: vec2 | number[]) {\n        this.position = vec2.fromValues(newPos[0], newPos[1]);\n        mat4.translate(this.viewMatrix, mat4.create(), [newPos[0], newPos[1], 0]);\n    }\n\n    translate(amount: vec2 | number[]) {\n        vec2.add(this.position, this.position, vec2.fromValues(amount[0], amount[1]));\n        mat4.translate(this.viewMatrix, mat4.create(), [this.position[0], this.position[1], 0]);\n    }\n\n\n    makeParent(child: Player) {\n        this.child = child;\n    }\n\n    update(): void {\n        if (this.child) {\n            let yPos = this.position[1];\n            let offset = this.child.sPressed && this.child.isGrounded ? -3 : 2\n            let goalPos = -Math.max(this.child.getPosition()[1] + offset, sceneAttributes.deathHeight + 10);\n\n            if (this.child.isGrounded && Math.abs(yPos - goalPos) > 0.01) {\n                yPos += (goalPos - yPos) * 0.06;\n            }\n            else {\n                yPos += (goalPos - yPos) * 0.015;\n            }\n            this.setPosition([-this.child.getPosition()[0], yPos]);            \n        }\n    }\n};\n\nexport default Camera;\n","import {vec2, vec4, mat4, mat3} from 'gl-matrix';\nimport Drawable from './Drawable';\nimport Texture2D from '../Texture2D';\nimport {gl} from '../../globals';\n\nvar activeProgram: WebGLProgram = null;\n\nexport class Shader {\n    shader: WebGLShader;\n  \n    constructor(type: number, source: string) {\n        this.shader = gl.createShader(type);\n        gl.shaderSource(this.shader, source);\n        gl.compileShader(this.shader);\n    \n        if (!gl.getShaderParameter(this.shader, gl.COMPILE_STATUS)) {\n            throw gl.getShaderInfoLog(this.shader);\n        }\n    }\n};\n\nclass ShaderProgram {\n    prog: WebGLProgram;\n  \n    attrPos: number;\n    attrUV: number;\n    attrOff: number;\n    attrMir: number;\n    attrScale: number;\n  \n    unifModel: WebGLUniformLocation;\n    unifModelInvTr: WebGLUniformLocation;\n    unifViewProj: WebGLUniformLocation;\n    unifTime: WebGLUniformLocation;\n    unifCam: WebGLUniformLocation;\n    unifDimensions: WebGLUniformLocation;\n    unifSpriteTex: WebGLUniformLocation;\n    unifWin: WebGLUniformLocation;\n  \n    constructor(shaders: Array<Shader>) {\n        this.prog = gl.createProgram();\n    \n        for (let shader of shaders) {\n            gl.attachShader(this.prog, shader.shader);\n        }\n        gl.linkProgram(this.prog);\n        if (!gl.getProgramParameter(this.prog, gl.LINK_STATUS)) {\n           throw gl.getProgramInfoLog(this.prog);\n        }\n    \n        this.attrPos   = gl.getAttribLocation(this.prog, \"vs_Pos\");\n        this.attrUV    = gl.getAttribLocation(this.prog, \"vs_UV\");\n        this.attrOff   = gl.getAttribLocation(this.prog, \"vs_Offset\");\n        this.attrMir   = gl.getAttribLocation(this.prog, \"vs_MirrorUv\");\n        this.attrScale = gl.getAttribLocation(this.prog, \"vs_Scale\");\n    \n        this.unifModel      = gl.getUniformLocation(this.prog, \"u_Model\");\n        this.unifModelInvTr = gl.getUniformLocation(this.prog, \"u_ModelInvTr\");\n        this.unifViewProj   = gl.getUniformLocation(this.prog, \"u_ViewProj\");\n        this.unifDimensions = gl.getUniformLocation(this.prog, \"u_Dimensions\");\n        this.unifTime       = gl.getUniformLocation(this.prog, \"u_Time\");\n        this.unifCam        = gl.getUniformLocation(this.prog, \"u_CameraPos\");\n        this.unifSpriteTex  = gl.getUniformLocation(this.prog, \"u_SpriteTex\");\n        this.unifWin        = gl.getUniformLocation(this.prog, \"u_Win\");\n    }\n  \n    use() {\n        if (activeProgram !== this.prog) {\n            gl.useProgram(this.prog);\n            activeProgram = this.prog;\n        }\n    }\n  \n    setCameraPos(pos: vec2) {\n        this.use();\n        if(this.unifCam !== -1) {\n            gl.uniform2f(this.unifCam, pos[0], pos[1]);\n        }\n    }\n  \n    setDimensions(width: number, height: number) {\n        this.use();\n        if(this.unifDimensions !== -1) {\n            gl.uniform2f(this.unifDimensions, width, height);\n        }\n    }\n\n    setWin(win: boolean) {\n        this.use();\n        if (this.unifWin !== -1) {\n            gl.uniform1i(this.unifWin, win ? 1 : 0);\n        }\n    }  \n    \n    setModelMatrix(model: mat4) {\n        this.use();\n        if (this.unifModel !== -1) {\n           gl.uniformMatrix4fv(this.unifModel, false, model);\n        }\n    \n        if (this.unifModelInvTr !== -1) {\n            let modelinvtr: mat4 = mat4.create();\n            mat4.transpose(modelinvtr, model);\n            mat4.invert(modelinvtr, modelinvtr);\n            gl.uniformMatrix4fv(this.unifModelInvTr, false, modelinvtr);\n        }\n    }\n  \n    setViewProjMatrix(vp: mat4) {\n        this.use();\n        if (this.unifViewProj !== -1) {\n            gl.uniformMatrix4fv(this.unifViewProj, false, vp);\n        }\n    }\n  \n    setTime(t: number) {\n        this.use();\n        if (this.unifTime !== -1) {\n            gl.uniform1f(this.unifTime, t);\n        }\n    }\n\n    setSpriteTex(tex: Texture2D) {\n        this.use();\n        if (this.unifSpriteTex !== -1) {\n            tex.loadTexture();\n            gl.uniform1i(this.unifSpriteTex, tex.slot);\n        }\n    }\n  \n    draw(d: Drawable) {\n        this.use();\n    \n        if (this.attrPos != -1 && d.bindPos()) {\n            gl.enableVertexAttribArray(this.attrPos);\n            gl.vertexAttribPointer(this.attrPos, 2, gl.FLOAT, false, 0, 0);\n            gl.vertexAttribDivisor(this.attrPos, 0); // Advance 1 index in pos VBO for each vertex\n        }\n    \n        if (this.attrUV != -1 && d.bindUV()) {\n            gl.enableVertexAttribArray(this.attrUV);\n            gl.vertexAttribPointer(this.attrUV, 2, gl.FLOAT, false, 0, 0);\n            gl.vertexAttribDivisor(this.attrUV, d.isInstanced() ? 1 : 0);\n        }\n\n        if (this.attrOff != -1 && d.bindOff()) {\n            gl.enableVertexAttribArray(this.attrOff);\n            gl.vertexAttribPointer(this.attrOff, 2, gl.FLOAT, false, 0, 0);\n            gl.vertexAttribDivisor(this.attrOff, 1);\n        }\n\n        if (this.attrMir != -1 && d.bindMir()) {\n            gl.enableVertexAttribArray(this.attrMir);\n            gl.vertexAttribIPointer(this.attrMir, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(this.attrMir, 1);\n        }\n\n        if (this.attrScale != -1 && d.bindScale()) {\n            gl.enableVertexAttribArray(this.attrScale);\n            gl.vertexAttribPointer(this.attrScale, 1, gl.FLOAT, false, 0, 0);\n            gl.vertexAttribDivisor(this.attrScale, 1);\n        }\n        \n        d.bindIdx();\n        if (d.isInstanced) {\n            gl.drawElementsInstanced(d.drawMode(), d.elemCount(), gl.UNSIGNED_INT, 0, d.numInstances);\n        }\n        else {\n            gl.drawElements(d.drawMode(), d.elemCount(), gl.UNSIGNED_INT, 0);\n        }\n    \n        if (this.attrPos != -1) {\n            gl.disableVertexAttribArray(this.attrPos);\n        }\n        if (this.attrUV != -1) {\n            gl.disableVertexAttribArray(this.attrUV);\n        }\n        if (this.attrOff != -1) {\n            gl.disableVertexAttribArray(this.attrOff);\n        }\n    }\n};\n\nexport default ShaderProgram;\n","import {gl} from '../globals';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\n\nclass Texture2D {\n    image: HTMLImageElement;\n    slot: number;\n    loaded: boolean;\n\n    constructor(path: string, slot: number = 0) {\n        this.loaded = false;\n        this.image = new Image();\n        this.image.onload = () => {this.loaded = true}\n        this.image.src = path;\n        this.slot = slot;\n    }\n\n    private loadTextureCallback(texture: WebGLTexture): void {\n        this.loaded = true;\n        gl.activeTexture(gl.TEXTURE0 + this.slot);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.image);\n    }\n\n    loadTexture(): void {\n        const texture = gl.createTexture();\n        if (this.loaded) {\n            this.loadTextureCallback(texture);\n        }\n        else {\n            gl.bindTexture(gl.TEXTURE_2D, texture)\n            this.image.onload = () => {this.loadTextureCallback(texture)};\n        }\n    }\n}\n\nexport default Texture2D;","import {vec2} from 'gl-matrix';\nimport RhythmGroup from './RhythmGroup';\nimport RhythmGroupGenerator from './RhythmGroupGenerator';\nimport GeometryGenerator from './GeometryGenerator';\nimport Terrain from '../scene/Terrain';\nimport Coin from '../scene/Coin';\nimport Spike from '../scene/Spike';\nimport Baddie from '../scene/Baddie';\n\nexport default class LevelGenerator {\n    \n    totalGroups: number;\n    terrain: Terrain\n    groupGenerator: RhythmGroupGenerator;\n    geometryGenerator: GeometryGenerator;\n    rhythmGroups: RhythmGroup[];\n\n    constructor(\n        _totalGroups: number,\n        _terrain: Terrain,\n        minGroupDuration: number,\n        maxGroupDuration: number,\n        density: number,\n        jumpFrequency: number,\n        beatFrequencies: number[]\n    ) {\n        this.totalGroups = _totalGroups;\n        this.terrain = _terrain;\n        this.rhythmGroups = [];\n\n        // Create the rhythm generator\n        this.groupGenerator = new RhythmGroupGenerator(\n            minGroupDuration,\n            maxGroupDuration,\n            density,\n            jumpFrequency,\n            beatFrequencies\n        );\n\n        // Create the geometry generator\n        this.geometryGenerator = new GeometryGenerator(this.terrain);\n    }\n\n    generateRhythms() {\n        for (let i = 0; i < this.totalGroups; i++) {\n            this.rhythmGroups.push(this.groupGenerator.generateRhythmGroup());\n        }\n    }\n\n    generateGeometry(): Set<vec2|number[]> {\n        this.geometryGenerator.generateStartArea();\n        for (let i = 0; i < this.rhythmGroups.length; i++) {\n            let group = this.rhythmGroups[i];\n            this.geometryGenerator.generateGroupGeometry(group);\n            this.geometryGenerator.generateRestArea(14, i == this.rhythmGroups.length - 1);\n        }\n        return this.geometryGenerator.topTiles;\n    }\n\n    addCoins(topTiles: Set<vec2|number[]>) {\n        let topTileCopy = new Map<string, number[]>();\n        for (let tt of topTiles) {\n            let tile = [tt[0], tt[1]];\n            topTileCopy.set(tile.toString(), tile);\n        }\n        let platforms = [];\n        let leftmost = -1;\n        let rightmost = -1;\n        while (topTileCopy.size > 0) {\n            let curPlatform: number[][] = [];\n            let curTile = topTileCopy.values().next().value;\n            let curKey = curTile.toString();\n            curPlatform.push(curTile);\n            leftmost = curTile[0];\n            rightmost = curTile[0];\n            topTileCopy.delete(curKey);\n            while (topTileCopy.has([leftmost - 1, curTile[1]].toString())) {\n                let leftTile = [leftmost - 1, curTile[1]];\n                curPlatform.push(leftTile)\n                topTileCopy.delete(leftTile.toString());\n                leftmost--;\n            }\n            while (topTileCopy.has([rightmost + 1, curTile[1]].toString())) {\n                let rightTile = [rightmost + 1, curTile[1]];\n                curPlatform.push(rightTile)\n                topTileCopy.delete(rightTile.toString());\n                rightmost++;\n            }\n            platforms.push(curPlatform);\n        }\n\n        let firstPlatform = true;\n        for (let platform of platforms) {\n            if (Math.random() < 0.25) {\n                for (let tile of platform) {\n                    new Coin([tile[0], tile[1] + 1]);\n                }\n            }\n            else if (\n                platform.length >= 3 &&\n                Math.random() < 0.2 &&\n                !firstPlatform &&\n                !this.geometryGenerator.isRestTile(platform[0])\n            ) {\n                let pos = platform[Math.floor(Math.random() * platform.length)];\n                new Baddie([pos[0], pos[1] + 1], this.terrain);\n            }\n            firstPlatform = false;\n        }\n    }\n}","import RhythmGroup, {Verb, JumpType} from './RhythmGroup';\nimport sceneAttributes from '../scene/SceneAttributes';\n\nexport enum BeatPattern {\n    REGULAR = 0,\n    RANDOM = 1,\n    SWING = 2\n}\n\nclass RhythmGroupGenerator {\n    minGroupDuration: number;\n    maxGroupDuration: number;\n    patternFrequencies: Map<BeatPattern, number>;\n    density: number;\n    jumpFrequency: number;\n\n    constructor(\n        minDuration: number,\n        maxDuration: number,\n        density: number,\n        jumpFrequency: number,\n        beatFrequencies: number[],\n    ) {\n        this.minGroupDuration = minDuration;\n        this.maxGroupDuration = maxDuration;\n        this.patternFrequencies = new Map<BeatPattern, number>();\n        this.jumpFrequency = jumpFrequency;\n\n        let normalizer = beatFrequencies.reduce((prev: number, cur: number) => prev + cur);\n        let patterns = [BeatPattern.REGULAR, BeatPattern.RANDOM, BeatPattern.SWING];\n        for (let idx = 0; idx < patterns.length; idx++) {\n            this.patternFrequencies.set(patterns[idx], beatFrequencies[idx] / normalizer);\n        }\n        this.density = density;\n    }\n\n    private getBeatTimes(groupDuration: number, pattern: BeatPattern): number[] {\n        let out: number[] = [];\n        let amount = Math.floor(groupDuration * this.density);\n\n        let shortBeat = groupDuration / (2 * amount - 1.0);\n        let longBeat = 3 * shortBeat;\n\n        for (let i = 0; i < amount; i++) {\n            if (pattern === BeatPattern.REGULAR) {\n                out.push(i * (groupDuration * 1.0 / amount))\n            }\n            else if (pattern === BeatPattern.RANDOM) {\n                out.push(Math.random() * groupDuration);\n            }\n            else if (pattern === BeatPattern.SWING) {\n                if (i % 2 == 0) {\n                    out.push((i / 2) * (longBeat + shortBeat));\n                }\n                else {\n                    out.push(((i - 1) / 2) * (longBeat + shortBeat) + longBeat);\n                }\n            }\n        }\n        return out;\n    }\n\n    generateRhythmGroup(): RhythmGroup {\n        let groupDuration: number = this.minGroupDuration === this.maxGroupDuration ?\n            this.maxGroupDuration :\n            Math.abs(Math.random() * (this.maxGroupDuration - this.minGroupDuration) + this.minGroupDuration);\n\n        // Decide the beat pattern randomly\n        let rng = Math.random();\n        let cumulative = 0;\n        let chosenPattern: BeatPattern;\n        for (let frequency of this.patternFrequencies) {\n            cumulative += frequency[1];\n            if (cumulative > rng) {\n                chosenPattern = frequency[0];\n                break;\n            }\n        }\n\n        let group: RhythmGroup = new RhythmGroup(groupDuration);\n        let beatTimes: number[] = this.getBeatTimes(groupDuration, chosenPattern);\n\n        let maxJumpHold = sceneAttributes.maxJumpHold;\n        let jumpLengths = [JumpType.SHORT, JumpType.MEDIUM, JumpType.LONG];\n\n        let lastJumpTime = -1;\n        let lastJumpDuration = 0;\n        group.addAction(Verb.MOVE, 0, groupDuration);\n        for (let time of beatTimes) {\n            if (time > lastJumpTime + lastJumpDuration) {\n                if (Math.random() < this.jumpFrequency) {\n                    let jumpType = Math.floor(Math.random() * jumpLengths.length);\n                    group.addAction(Verb.JUMP, time, jumpLengths[jumpType]);\n                }\n            }\n        }\n\n        return group\n    }\n}\n\nexport default RhythmGroupGenerator;","import sceneAttributes from '../scene/SceneAttributes';\n\nexport enum Verb {\n    MOVE,\n    JUMP\n}\n\nexport enum JumpType {\n    SHORT = sceneAttributes.maxJumpHold * 0.75,\n    MEDIUM = sceneAttributes.maxJumpHold * 0.875,\n    LONG = sceneAttributes.maxJumpHold,\n}\n\nexport class Action {\n    type: Verb;\n    startTime: number;\n    duration: number;\n\n    constructor(_type: Verb, _startTime: number, _duration: number) {\n        this.type = _type;\n        this.startTime = _startTime;\n        this.duration = _duration;\n    }\n}\n\nclass RhythmGroup {\n\n    actions: Action[];\n    duration: number;\n\n    constructor(_duration: number) {\n        this.duration = _duration;\n        this.actions = [];\n    }\n\n    addAction(type: Verb, startTime: number, actionDuration: number): boolean {\n\n        let groupDuration = this.duration;\n        if (startTime > groupDuration) {\n            return false;\n        }\n\n        if (startTime + actionDuration > groupDuration && type !== Verb.JUMP) {\n            actionDuration = groupDuration - startTime;\n        }\n        let newAction = new Action(type, startTime, actionDuration);\n        this.actions.push(newAction);\n        return true;\n    }\n}\n\nexport default RhythmGroup;","import {vec2} from 'gl-matrix';\nimport RhythmGroupGenerator from './RhythmGroupGenerator'\nimport RhythmGroup, {Action, Verb, JumpType} from './RhythmGroup';\nimport sceneAttributes from '../scene/SceneAttributes';\nimport Terrain from '../scene/Terrain';\nimport Spike from '../scene/Spike';\nimport Coin from '../scene/Coin';\nimport Checkpoint from '../scene/Checkpoint';\nimport Gem from '../scene/Gem';\nimport Platform from '../scene/Platform';\nimport {spriteCoordinates} from '../constants';\n\ntype MovementState = {state: string, duration: number}\ntype JumpState = {startTime: number, jumpHold: number};\n\nexport default class GeometryGenerator {\n\n    terrain: Terrain;\n    currentPos: vec2;\n    jumpHeights: Map<JumpType, {height: number, time: number}>\n    curTime: number;\n    topTiles: Set<vec2|number[]>;\n    restTiles: Map<number, Set<Number>>;\n\n    constructor(_terrain: Terrain) {\n        this.terrain = _terrain;\n        this.currentPos = vec2.fromValues(-3, -1);\n        this.jumpHeights = new Map();\n        this.jumpHeights.set(JumpType.SHORT, this.getJumpHeight(JumpType.SHORT));\n        this.jumpHeights.set(JumpType.MEDIUM, this.getJumpHeight(JumpType.MEDIUM));\n        this.jumpHeights.set(JumpType.LONG, this.getJumpHeight(JumpType.LONG));\n        this.topTiles = new Set<vec2|number[]>();\n        this.restTiles = new Map();\n    }\n\n    private queuesFromRhythm(rhythm: RhythmGroup): {moveStates: MovementState[], jumpStates: JumpState[]} {\n        let movement: MovementState[] = [];\n        let jumps: JumpState[] = [];\n        let lastMoveStartTime: number = 0;\n        let lastMoveDuration: number = 0;\n        for (let action of rhythm.actions) {\n            if (action.type === Verb.MOVE) {\n                if (movement.length > 0) {\n                    let curMoveStartTime = action.startTime;\n                    let lastMove = movement[movement.length - 1];\n                    movement.push({\n                        state: \"waiting\",\n                        duration: curMoveStartTime - (lastMoveStartTime + lastMoveDuration)\n                    });\n                }\n                lastMoveDuration = action.duration;\n                movement.push({\n                    state: \"moving\",\n                    duration: action.duration\n                })\n            }\n            else if (action.type === Verb.JUMP) {\n                jumps.push({\n                    startTime: action.startTime,\n                    jumpHold: action.duration,\n                });\n            }\n        }\n        return {moveStates: movement, jumpStates: jumps};\n    }\n\n    // Calculate the height of a jump when the jump button is held for a specified amount of time\n    // Also find the time it takes to get to that height\n    private getJumpHeight(jumpHold: number): {height: number, time: number} {\n        // This is, at its core, a ballistics problem. However, it's complicated by the fact\n        // that the velocity is controlled by the player even after the jump begins. This means \n        // that to find the max height, we have to separate the jump into 2 parts: the part \n        // where the jump key is being held, and the part afterward. We have to find the height\n        // and upward velocity acheived at the end of the first part, and then the second part\n        // just becomes a simple physics problem. Getting those vectors will rely heavily on the\n        // jumping implementation though.\n        let gravity = sceneAttributes.gravity;\n        let jumpVel = sceneAttributes.playerJump;\n\n        // To simplify the math (and because it wouldn't be entirely accurate anyway)\n        // I am just going to simulate jumping (assuming perfect framerate)\n        let vel = 0;\n        let inputvel = 0;\n        let pos = 0;\n        let jumpTime = jumpHold;\n        let totalTime = 0;\n        let flag = 0\n        while (true) {\n            if (flag > 1) {\n                if (vel - gravity < 0) {\n                    break;\n                }\n                vel -= gravity;\n            }\n            flag++;\n            vel += inputvel;\n            pos += vel / 60.0;\n            if (jumpTime > 0) {\n                jumpTime -= 0.016;\n                let t = Math.max(0, jumpTime / 0.4);\n                inputvel = t * sceneAttributes.playerJump;\n            }\n            else {\n                inputvel = 0\n            }\n            totalTime += 1.0 / 60;\n        }\n        return {height: pos, time: totalTime};\n    }\n\n    private addTopTile(tile: number[]|vec2, rest: boolean = false) {\n        this.topTiles.add([tile[0], tile[1]]);\n        if (rest) {\n            if (this.restTiles.has(tile[0])) {\n                this.restTiles.get(tile[0]).add(tile[1]);\n            }\n            else {\n                this.restTiles.set(tile[0], new Set<number>([tile[1]]));\n            }\n        }\n    }\n\n    isRestTile(tile: vec2|number[]): boolean {\n        if (this.restTiles.has(tile[0])) {\n            return this.restTiles.get(tile[0]).has(tile[1]);\n        }\n        return false;\n    }\n\n    private generateSimpleJump(jumpType: JumpType) {\n        let height = this.jumpHeights.get(jumpType);\n        let minHeight = Math.max(-4, sceneAttributes.deathHeight + 5 - this.currentPos[1]);\n        let endHeight = Math.floor(Math.random() * (height.height - minHeight) + minHeight);\n        let totalFrames = height.time * 60 + Math.sqrt((height.height - endHeight) / (sceneAttributes.gravity / 60));\n        let totalDistance = Math.floor(sceneAttributes.playerSpeed * totalFrames / 60);\n\n        if (totalDistance === 2 && endHeight === 0){\n            endHeight = 1\n        }\n\n        this.currentPos[0] += totalDistance;\n        this.currentPos[1] += endHeight;\n        this.terrain.setTileAt(this.currentPos);\n        this.addTopTile(this.currentPos);\n    }\n\n    private generateSpikeJump(jumpType: JumpType) {\n        let height = this.jumpHeights.get(jumpType);\n        let peakDistance = Math.floor(sceneAttributes.playerSpeed * height.time);\n        let totalFrames = height.time * 60 + Math.sqrt(height.height / (sceneAttributes.gravity / 60));\n        let totalDistance = Math.floor(sceneAttributes.playerSpeed * totalFrames / 60) + 2;\n        \n        for (let i = 0; i <= totalDistance; i++) {\n            if (i === peakDistance) {\n                this.terrain.setColumnAt([this.currentPos[0] + i, this.currentPos[1] - 1]);\n            }\n            else {\n                this.terrain.setColumnAt([this.currentPos[0] + i, this.currentPos[1]]);\n                this.addTopTile([this.currentPos[0] + i, this.currentPos[1]]);\n            }\n        }\n\n        for (let i = 0; i < height.height; i++) {\n            new Spike([this.currentPos[0] + peakDistance, this.currentPos[1] + i]);\n        }\n        for (let i = 0; i < 4; i++) {\n            new Spike([\n                this.currentPos[0] + peakDistance,\n                height.height + this.currentPos[1] + 4 + i]);\n        }\n\n        if (Math.random() < 0.25) {\n            new Coin([this.currentPos[0] + peakDistance + 0, this.currentPos[1] + height.height + 1]);\n        }\n\n        for (let i = -1; i <= 1; i++) {\n            for (let j = 0; j <= 1; j++) {\n                this.terrain.setTileAt([\n                    this.currentPos[0] + peakDistance + i,\n                    height.height + this.currentPos[1] + 9 + j\n                ]);\n            }\n        }\n\n        this.currentPos[0] += totalDistance;\n    }\n\n    generateSpikeGap (jumpType: JumpType) {\n        let height = this.jumpHeights.get(jumpType);\n        let totalFrames = height.time * 60 + Math.sqrt((height.height) / (sceneAttributes.gravity / 60));\n        let totalDistance = Math.floor(sceneAttributes.playerSpeed * totalFrames / 60);\n        let peakDistance = Math.floor(sceneAttributes.playerSpeed * height.time);\n\n        for (let jump of this.jumpHeights.keys()) {\n            if (jumpType != jump) {\n                new Spike([\n                    this.currentPos[0] + peakDistance,\n                    this.currentPos[1] + this.jumpHeights.get(jump).height\n                ])\n            }\n            else {\n                new Coin([\n                    this.currentPos[0] + peakDistance,\n                    this.currentPos[1] + this.jumpHeights.get(jump).height\n                ])\n            }\n        }\n\n        this.currentPos[0] += totalDistance;\n        this.terrain.setTileAt(this.currentPos);\n        this.addTopTile(this.currentPos);\n    }\n\n    private generateStraightPath(length: number) {\n        for (let i = 0; i < Math.round(length); i++) {\n            this.terrain.setColumnAt(this.currentPos);\n            this.addTopTile(this.currentPos);\n            this.currentPos[0] += 1;\n        }\n    }\n\n    private gentleDecline(length: number, decline: number) {\n        let currentHeight = this.currentPos[1];\n        for (let i = 0; i < Math.round(length); i++) {\n            this.terrain.setColumnAt(this.currentPos);\n            this.addTopTile(this.currentPos);\n            currentHeight -= decline / length;\n            this.currentPos[0] += 1;\n            this.currentPos[1] = Math.round(currentHeight);\n        }\n    }\n\n    generateGroupGeometry(rhythm: RhythmGroup) {\n        let playerSpeed = sceneAttributes.playerSpeed;\n        let queues = this.queuesFromRhythm(rhythm);\n        let curTime = 0;\n\n        for (let i = 0; i < queues.jumpStates.length; i++) {\n\n            let jump = queues.jumpStates[i];\n            let beatDuration = rhythm.duration - jump.startTime;\n            if (i < queues.jumpStates.length - 1) {\n                beatDuration = queues.jumpStates[i + 1].startTime - jump.startTime;\n            }\n\n            let prevX = this.currentPos[0];\n            let obstacleType = Math.random();\n            if (obstacleType < 0.2) {\n                this.generateSpikeGap(jump.jumpHold);\n            }\n            else if (obstacleType < 0.4) {\n                this.generateSpikeJump(jump.jumpHold);\n            }\n            else {\n                this.generateSimpleJump(jump.jumpHold);\n            }\n            let jumpTime = (this.currentPos[0] - prevX) / playerSpeed;\n            let remainingTime = beatDuration - jumpTime;\n            if (remainingTime > 0) {\n                let remainingLength = remainingTime * playerSpeed;\n                if (Math.random() < 0.25) {\n                    this.gentleDecline(remainingLength, Math.random() < 0.5 ? 1 : 2);\n                }\n                else {\n                    this.generateStraightPath(remainingLength);\n                }\n            }\n        }\n    }\n\n\n    generateRestArea(length: number, lastRest: boolean = false) {\n        for (let i = 1; i <= length; i++) {\n            this.addTopTile([this.currentPos[0] + i, this.currentPos[1] - 1], true);\n            this.terrain.setTileAt([this.currentPos[0] + i, this.currentPos[1] - 1]);\n            this.terrain.setTileAt([this.currentPos[0] + i, this.currentPos[1] - 2]);\n        }\n\n        this.terrain.setColumnAt([this.currentPos[0] + 1, this.currentPos[1] - 2])\n        this.terrain.setColumnAt([this.currentPos[0] + length, this.currentPos[1] - 2])\n\n        this.currentPos[0] += length;\n        this.currentPos[1] -= 1;\n\n        if (lastRest) {\n            new Gem([\n                Math.floor(this.currentPos[0] - length / 2),\n                this.currentPos[1] + 2\n            ]);\n        }\n        else {\n            new Checkpoint([\n                Math.floor(this.currentPos[0] - length / 2),\n                this.currentPos[1] + 1\n            ]);\n        }  \n    }\n\n    generateStartArea() {\n        for (let i = -4; i <= 4; i++) {\n            this.terrain.setTileAt([i,  0]);\n            this.terrain.setTileAt([i, -1]);\n            this.terrain.setTileAt([i, -3]);\n            this.terrain.setTileAt([i, -4]);\n\n            if (i !== -2 && i !== 2) {\n                this.terrain.setTileAt([i, -2]);\n            }\n            this.currentPos[0] = 4;\n            this.currentPos[1] = 0;\n        }\n\n        for (let i = sceneAttributes.deathHeight; i < -4; i++) {\n            this.terrain.setTileAt([-4, i]);\n            this.terrain.setTileAt([4, i]);\n        }\n\n        let m = (time: number) => {\n            return vec2.fromValues(\n                0,\n                1 - Math.cos(time)\n            );\n        }\n    }\n}\n","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\n\nclass Spike extends GameObject {\n\n    constructor(pos: vec2 | number[]) {\n        super(false, true, true);\n        this.setPosition(pos);\n    }\n\n    getSpriteUv() {\n        return spriteCoordinates.SPRITE_SPIKE;\n    }\n}\n\nexport default Spike","import {vec2} from 'gl-matrix';\nimport Drawable from './../rendering/gl/Drawable';\nimport GameEngine from './GameEngine';\nimport Terrain from '../scene/Terrain';\nimport sceneAttributes from '../scene/SceneAttributes';\n\nabstract class GameObject {\n    private drawable: Drawable;\n    private position: vec2;\n    private velocity: vec2;\n    public size: number;\n    protected inputVelocity: vec2;\n    protected prevInputVelocty: vec2;\n    protected passive: boolean;\n    protected collidable: boolean;\n    protected dynamic: boolean;\n    protected grounded: boolean;\n    protected direction: number;\n    protected goCollide: boolean;\n    get isGrounded() : boolean {\n        return this.grounded;\n    }\n\n    constructor(isDynamic: boolean, isPassive: boolean, isCollidable: boolean) {\n        this.dynamic = isDynamic;\n        this.passive = isPassive;\n        this.collidable = isCollidable;\n        this.position = vec2.fromValues(0, 0);\n        this.velocity = vec2.fromValues(0, 0);\n        this.inputVelocity = vec2.fromValues(0, 0);\n        this.prevInputVelocty = vec2.fromValues(0, 0);\n        this.direction = 1;\n        this.size = 1;\n\n        GameEngine.getEngine().addGameObject(this);\n    }\n\n    destroy(): void {\n        GameEngine.getEngine().destroyGameObject(this);\n        this.drawable = null;\n    }\n\n    isPassive(): boolean {\n        return this.passive;\n    }\n\n    isCollidable(): boolean {\n        return this.collidable;\n    }\n\n    facingLeft(): boolean {\n        return this.direction === -1;\n    }\n\n    getPosition(): vec2 {\n        return vec2.fromValues(this.position[0], this.position[1]);\n    }\n\n    setPosition(newPosition: vec2 | number[]): void {\n        this.position[0] = newPosition[0];\n        this.position[1] = newPosition[1];\n    }\n\n    scale(amount: number) {\n        this.size *= amount;\n    }\n\n    setSize(size: number) {\n        this.size = size;\n    }\n\n    abstract getSpriteUv(): vec2;\n\n    translate(amount: vec2 | number[]): void {\n        vec2.add(this.position, this.position, vec2.fromValues(amount[0], amount[1]));\n    }\n\n    getVelocity(): vec2 {\n        return vec2.fromValues(this.velocity[0], this.velocity[1]);\n    }\n\n    physicsUpdate(delta: number): void {\n        if (!this.dynamic) {\n            return;\n        }\n\n        let prevVelocity: vec2 = this.velocity;\n        //this.velocity = vec2.fromValues(0, 0);\n\n        // Apply gravity\n        if (this.grounded) {\n            this.velocity[1] = 0;\n        }\n        else {\n            this.velocity[1] -= sceneAttributes.gravity;\n        }\n\n        // Apply non-physical motion\n        if (Math.abs(this.inputVelocity[0]) > 0.001) {\n            let influence = this.grounded ? 0.2 : 0.11;\n            this.velocity[0] = (1 - influence) * this.velocity[0] + influence * this.inputVelocity[0];\n        }\n        else if (this.grounded) {\n            this.velocity[0] *= 0.7;\n        }\n        else {\n            this.velocity[0] *= 0.95;\n        }\n        this.velocity[1] += this.inputVelocity[1];\n        // Scale back velocity if it's too high\n        let speed: number = vec2.length(this.velocity);\n        if (speed > sceneAttributes.maxObjectSpeed) {\n            vec2.scale(this.velocity, this.velocity, sceneAttributes.maxObjectSpeed / speed);\n        }\n\n        // Update the object position, accounting for collisions\n        // We assume that before applying any motion this frame, the object is not intersecting anything\n        // We will use the following technique to do this:\n        //   - Apply the velocity vector to our position in the x axis only\n        //   - Check if, in this new position, the object intersects with the terrain (in all axes)\n        //   - If the object is now intersecting with a tile, we respond by pushing back the object by\n        //     the amount of the overlap\n        //     - Note that this pushback will only have to be in the x axis\n        //   - Repeat with the y-axis\n        let deltaPos: vec2 = vec2.scale(vec2.create(), this.velocity, 1.0 / 60);\n        this.goCollide = false;\n        for (let axis = 0; axis < 2; axis++) {\n            if (Math.abs(deltaPos[axis]) > 10e-6) {\n                this.position[axis] += deltaPos[axis];\n                let adjacentTiles: number[][] = this.getAdjacentTiles();\n                for (let tile of adjacentTiles) {\n                    for (let terrain of GameEngine.getEngine().terrainObjects) {\n                        let response: vec2 = this.testTerrainCollision(terrain, tile, axis);\n                        vec2.add(this.position, this.position, response)\n                    }\n                }\n                for (let go of GameEngine.getEngine().getCollidableObjects()) {\n                    if (go.constructor.name === \"Platform\") {\n                        let response: vec2 = this.goCollisionResponse(go, axis);\n                        if (response[1] > 0.0001) {\n                            this.goCollide = true;\n                        }\n                        vec2.add(this.position, this.position, response);\n                    }\n                }\n            }\n        }\n\n        let groundedCheck = this.checkIfGrounded();\n        if (!this.grounded && groundedCheck) {\n            this.onGrounded(this.velocity[1]);\n        }\n        this.grounded = groundedCheck;\n        vec2.copy(this.prevInputVelocty, this.inputVelocity);\n        this.inputVelocity = vec2.fromValues(0, 0);\n    }\n\n    checkObjectCollisions(other: GameObject) {\n        if (this.testGameObjectCollision(other)) {\n            this.onCollision(other);\n        }\n    }\n\n    private getAdjacentTiles(): number[][] {\n        let x = Math.floor(this.position[0]);\n        let y = Math.floor(this.position[1]);\n        return [\n            [x - 1, y + 1], [x + 0, y + 1], [x + 1, y + 1],\n            [x - 1, y + 0], [x + 0, y + 0], [x + 1, y + 0],\n            [x - 1, y - 1], [x + 0, y - 1], [x + 1, y - 1]\n        ];\n    }\n\n    private testTerrainCollision(terrain: Terrain, tile: vec2 | number[], axis: number): vec2 {\n        let tX = tile[0];\n        let tY = tile[1];\n        let pX = this.position[0];\n        let pY = this.position[1];\n\n        if (!terrain.tileAt(tX, tY)) {\n            return vec2.create();\n        }\n        \n        let xIntersect: boolean = pX < (tX + 1) && tX < (pX + 1);\n        let yIntersect: boolean = pY < (tY + 1) && tY < (pY + 1);\n        let isIntersecting: boolean = xIntersect && yIntersect;\n\n        let axisVelocity: number = this.velocity[axis];\n        if (isIntersecting) {\n            let pushback: vec2 = vec2.create();\n            if (axisVelocity > 0) {\n                let isY = (axis == 1) ? 0 : 0;\n                pushback[axis] = tile[axis] - (this.position[axis] + 1 + isY);\n            }\n            else {\n                pushback[axis] = (tile[axis] + 1) - this.position[axis];\n            }\n            return pushback;\n        }\n        else {\n            return vec2.create();\n        }\n    }\n\n    private testGameObjectCollision(other: GameObject): boolean {\n        let tX = other.getPosition()[0];\n        let tY = other.getPosition()[1];\n        let pX = this.position[0];\n        let pY = this.position[1];\n\n        // Anti-frustration feature\n        if (other.constructor.name === \"Spike\" || other.constructor.name === \"Baddie\") {\n            tX += 0.5;\n            tY += 0.5;\n            let xIntersect: boolean = tX > pX && tX < pX + 1;\n            let yIntersect: boolean = tY > pY && tY < pY + 1;\n            return xIntersect && yIntersect;;\n        }\n        \n        let xIntersect: boolean = pX < (tX + 0.99) && tX < (pX + 0.99);\n        let yIntersect: boolean = pY < (tY + 0.99) && tY < (pY + 0.99);\n        let isIntersecting: boolean = xIntersect && yIntersect;\n        return isIntersecting;\n    }\n\n    private goCollisionResponse(other: GameObject, axis: number): vec2 {\n        let tX = other.position[0];\n        let tY = other.position[1];\n        let pX = this.position[0];\n        let pY = this.position[1];\n\n        if (other.passive || !other.collidable) {\n            return vec2.create();\n        }\n        \n        let xIntersect: boolean = pX < (tX + 1) && tX < (pX + 1);\n        let yIntersect: boolean = pY < (tY + 1) && tY < (pY + 1);\n        let isIntersecting: boolean = xIntersect && yIntersect;\n\n        let axisVelocity: number = this.velocity[axis];\n        if (isIntersecting) {\n            let pushback: vec2 = vec2.create();\n            if (axisVelocity > 0) {\n                let isY = (axis == 1) ? 0 : 0;\n                pushback[axis] = other.position[axis] - (this.position[axis] + 1 + isY);\n            }\n            else {\n                pushback[axis] = (other.position[axis] + 1) - this.position[axis];\n            }\n            return pushback;\n        }\n        else {\n            return vec2.create();\n        }\n    }\n\n    private checkIfGrounded(): boolean {\n\n        // Check if we would be colliding with a block if we were just a teensy bit lower\n        let newPos: vec2 = vec2.subtract(vec2.create(), this.position, vec2.fromValues(0, 0.05));\n        let gridPosition: vec2 = vec2.fromValues(\n            Math.floor(newPos[0]),\n            Math.floor(newPos[1])\n        );\n\n        for (let x = 0; x < 2; x++) {\n            let tX = gridPosition[0] + x;\n            let tY = gridPosition[1];\n            let existsTile = false;\n            for (let terrain of GameEngine.getEngine().terrainObjects) {\n                if (terrain.tileAt(tX, tY)) {\n                    existsTile = true;\n                    break;\n                }\n            }\n            if (!existsTile) {\n                continue;\n            }\n            if (newPos[0] < (tX + 1) && tX < (newPos[0] + 1) &&\n                newPos[1] < (tY + 1) && tY < (newPos[1] + 1))\n            {\n                return true;\n            }\n        }\n\n        let oldPos = [this.position[0], this.position[1]];\n        this.setPosition(newPos);\n        for (let go of GameEngine.getEngine().getCollidableObjects()) {\n            if (go.constructor.name === \"Platform\" && this.testGameObjectCollision(go)) {\n                this.setPosition(oldPos);\n                return true;\n            }\n        }\n        this.setPosition(oldPos);\n        return false;\n    }\n\n    onUpdate(delta: number): void {/* Please implement me*/};\n\n    onKeyPress(key: string): void {/* Or don't */};\n\n    onKeyDown(key: string): void {/* I don't really care too much at this point */};\n\n    onKeyUp(key: string): void {/* I'm just holding out til graduation at this point */}\n\n    protected onGrounded(verticalVelocity: number): void {}\n\n    protected onCollision(other: GameObject): void {}\n\n}\n\nexport default GameObject;","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\n\nconst ANIMATION_FRAME_LENGTH: number = 5;\n\nclass Coin extends GameObject {\n\n    animationFrame: number;\n\n    constructor(pos: vec2 | number[]) {\n        super(false, true, true);\n        this.animationFrame = 0;\n        this.setPosition(pos);\n        this.direction = 1;\n    }\n\n    onUpdate(delta: number) {\n        this.animationFrame = (this.animationFrame + 1) % (ANIMATION_FRAME_LENGTH * 8);\n        if (Math.random() < 0.01) {\n            let sparkle = new Particle(\n                spriteCoordinates.SPRITE_SPARKLE,\n                vec2.fromValues(\n                    this.getPosition()[0] + Math.random() - 0.5,\n                    this.getPosition()[1] + Math.random() - 0.5,\n                ),\n                0.5\n            );\n            sparkle.setMovement((time: number) => {\n                sparkle.setSize(time * (0.5 - time) * 8);\n                return vec2.create();\n            });\n        }\n    }\n\n    getSpriteUv(): vec2 {\n        if (this.animationFrame < ANIMATION_FRAME_LENGTH * 1) {\n            return spriteCoordinates.SPRITE_COIN_1\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 2) {\n            return spriteCoordinates.SPRITE_COIN_2;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 3) {\n            return spriteCoordinates.SPRITE_COIN_3;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 4) {\n            return spriteCoordinates.SPRITE_COIN_4;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 5) {\n            //this.direction = this.direction = -1;\n            return spriteCoordinates.SPRITE_COIN_5;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 6) {\n            return spriteCoordinates.SPRITE_COIN_4;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 7) {\n            return spriteCoordinates.SPRITE_COIN_3;\n        }\n        else if (this.animationFrame < ANIMATION_FRAME_LENGTH * 8) {\n            return spriteCoordinates.SPRITE_COIN_2;\n        }\n\n    }\n}\n\nexport default Coin;","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\n\nexport default class Particle extends GameObject {\n\n    private spriteUv: vec2;\n    private lifetime: number;\n    private time: number;\n    private movement: (t: number) => vec2;\n    private startingPos: vec2;\n\n\n    constructor (_spriteUv: vec2, _startingPos: vec2, _lifetime: number = Infinity) {\n        super(false, true, false);\n        this.spriteUv = _spriteUv;\n        this.lifetime = _lifetime;\n        this.time = 0;\n        this.startingPos = _startingPos;\n        this.movement = () => vec2.create();;\n    }\n\n    setMovement(move: (time: number) => vec2) {\n        this.movement = move;\n    }\n\n    onUpdate (delta: number) {\n        this.time += delta;\n        if (this.time > this.lifetime) {\n            this.destroy();\n        }\n        this.setPosition(vec2.add(vec2.create(), this.movement(this.time), this.startingPos));\n    }\n\n    getSpriteUv() {\n        return this.spriteUv;\n    }\n\n}","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\n\nconst ANIMATION_FRAME_LENGTH: number = 10;\n\nfunction random1(p: vec2, seed: vec2) : number {\n    let fract = (n: number) => n - Math.floor(n);\n    return fract(Math.sin(vec2.dot(\n        vec2.add(vec2.create(), p, seed),\n        vec2.fromValues(127.1, 311.7))\n    ) * 41352.5245);\n} \n\nclass Checkpoint extends GameObject {\n\n    animationFrame: number;\n    claimed: boolean;\n\n    constructor(pos: vec2 | number[]) {\n        super(false, false, true);\n        this.animationFrame = 0;\n        this.setPosition(pos);\n        this.claimed = false;\n    }\n\n    onUpdate(delta: number) {\n        this.animationFrame = (this.animationFrame + 1) % (ANIMATION_FRAME_LENGTH * 3);\n    }\n\n    onCollision(other: GameObject) {\n        if (other.constructor.name === \"Player\" && !this.claimed) {\n            this.claimed = true;\n            let numParticles = 30;\n            for (let i = 0; i < numParticles; i++) {\n                let p = new Particle(\n                    spriteCoordinates.SPRITE_SPARKLE,\n                    this.getPosition(),\n                    1\n                );\n                p.setMovement((time: number) => {\n                    let angle = 2 * Math.floor(i / 2) * Math.PI / numParticles;\n                    let offset = random1(vec2.fromValues(i, 0), vec2.fromValues(0.231, 0.5436)) * 0.5;\n                    p.setSize(1 - time);\n                    return vec2.fromValues(\n                        Math.cos(angle) * time * 8 + offset,\n                        Math.sin(angle) * time * 8 + offset - time * time * 10\n                    );\n                })\n            }\n        }\n    }\n\n    getSpriteUv(): vec2 {\n        if (this.claimed) {\n            if (this.animationFrame < 1 * ANIMATION_FRAME_LENGTH) {\n                return spriteCoordinates.SPRITE_CHECK_1;\n            }\n            else if (this.animationFrame < 2 * ANIMATION_FRAME_LENGTH) {\n                return spriteCoordinates.SPRITE_CHECK_2;\n            }\n            else {\n                return spriteCoordinates.SPRITE_CHECK_3;\n            }\n        }\n        else {\n            if (this.animationFrame < 1 * ANIMATION_FRAME_LENGTH) {\n                return spriteCoordinates.SPRITE_FLAG_1;\n            }\n            else if (this.animationFrame < 2 * ANIMATION_FRAME_LENGTH) {\n                return spriteCoordinates.SPRITE_FLAG_2;\n            }\n            else {\n                return spriteCoordinates.SPRITE_FLAG_3;\n            }\n        }\n    }\n}\n\nexport default Checkpoint;","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport GameEngine from '../engine/GameEngine';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\n\nexport default class Gem extends GameObject {\n\n    constructor(pos: vec2 | number[]) {\n        super(false, false, true);\n        this.setPosition(pos);\n    }\n\n    getSpriteUv(): vec2 {\n        return spriteCoordinates.SPRITE_GEM;\n    }\n\n    onUpdate(delta: number) {\n        if (Math.random() < 0.02) {\n            let sparkle = new Particle(\n                spriteCoordinates.SPRITE_SPARKLE,\n                vec2.fromValues(\n                    this.getPosition()[0] + Math.random() - 0.5,\n                    this.getPosition()[1] + Math.random() - 0.5,\n                ),\n                0.5\n            );\n            sparkle.setMovement((time: number) => {\n                sparkle.setSize(time * (0.5 - time) * 8);\n                return vec2.create();\n            });\n        }\n    }\n\n    onCollision(other: GameObject) {\n        if (other.constructor.name === \"Player\") {\n            GameEngine.getEngine().onWin();\n            this.destroy();\n        }\n    }\n\n}","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\nimport Terrain from './Terrain';\n\nconst ANIMATION_FRAME_LENGTH: number = 12;\nconst ENEMY_SPEED: number = 4;\n\nclass Baddie extends GameObject {\n    animationFrame: number;\n    terrain: Terrain;\n\n    constructor(pos: vec2 | number[], terrain: Terrain) {\n        super(false, false, true);\n        this.animationFrame = 0;\n        this.setPosition(pos);\n        this.direction = 1;\n        this.terrain = terrain;\n    }\n\n    onUpdate(delta: number) {\n        this.animationFrame = (this.animationFrame + 1) % ANIMATION_FRAME_LENGTH;\n        let tileBelow = [this.getPosition()[0] + 0.01 * this.direction, this.getPosition()[1] - 0.01];\n        let tileInFront = [this.getPosition()[0] + 0.01 * this.direction, this.getPosition()[1]];\n        if (this.direction === 1) {\n            tileInFront[0] += 1;\n            tileBelow[0] += 1;\n        }\n\n        if (\n            this.terrain.tileAt(tileInFront[0], tileInFront[1]) ||\n            !this.terrain.tileAt(tileBelow[0], tileBelow[1])\n        ) {\n            this.direction *= -1;\n        }\n        this.translate([ENEMY_SPEED * 1.0 / 60 * this.direction, 0]);\n    }\n\n    getSpriteUv() {\n        return this.animationFrame > ANIMATION_FRAME_LENGTH / 2 ? \n            spriteCoordinates.SPRITE_BADDIE_1:\n            spriteCoordinates.SPRITE_BADDIE_2;\n    }\n}\n\nexport default Baddie;","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nuniform mat4 u_ViewProj;\\nuniform mat4 u_Model;\\n\\nin vec2 vs_Pos;\\nin vec2 vs_Offset;\\nin vec2 vs_UV;\\nin float vs_Scale;\\nin int vs_MirrorUv;\\nout vec2 fs_Pos;\\nout vec2 fs_UV;\\n\\nvoid main() {\\n    fs_Pos = vs_Pos;\\n    bool mirrorUv = vs_MirrorUv == 1;\\n    fs_UV = vs_UV + vec2(mirrorUv ? 1.0 - vs_Pos.x : vs_Pos.x, 1.0 - vs_Pos.y);\\n\\n    vec2 actualPos = (vs_Pos - vec2(0.5, 0.5)) * vs_Scale + vs_Offset + vec2(0.0, 0.0);\\n    gl_Position = u_ViewProj * u_Model * vec4(actualPos, 0.5, 1);\\n}\\n\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nuniform sampler2D u_SpriteTex;\\nuniform int u_Win;\\nuniform float u_Time;\\n\\nin vec2 fs_Pos;\\nin vec2 fs_UV;\\n\\nout vec4 out_Col;\\n\\n\\nvoid main() {\\n    vec4 color = texture(u_SpriteTex, fs_UV / 8.0);\\n    if (color.a < 0.5) {\\n        discard;\\n    }\\n    if (u_Win == 1) {\\n        color = vec4(0, 0, 0, 1);\\n    }\\n    out_Col = color;\\n}\\n\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nuniform vec2 u_CameraPos;\\n\\nin vec2 vs_Pos;\\nin vec2 vs_UV;\\nout vec2 fs_Pos;\\nout vec2 fs_UV1;\\nout vec2 fs_UV2;\\n\\nvoid main() {\\n    fs_Pos = vs_Pos;\\n    const float squish1 = 1.8;\\n    fs_UV1 = vec2(\\n        vs_UV[0] / 1.5 - u_CameraPos[0] / 150.0,\\n        (vs_UV[1] / 4.0) * squish1 - (squish1 / 4.0 - 0.25) + (u_CameraPos[1] + 2.0) / 100.0\\n    );\\n\\n    const float squish2 = 1.0;\\n    fs_UV2 = vec2(\\n        vs_UV[0] / 2.0 - u_CameraPos[0] / 300.0,\\n        (vs_UV[1] / 4.0 + 0.25) * squish2 - (squish2 / 4.0 - 0.25) + (u_CameraPos[1] + 2.0) / 200.0\\n    );\\n\\n    gl_Position = vec4(vs_Pos, 0, 1);\\n}\\n\"","module.exports = \"#version 300 es\\nprecision highp float;\\n\\nuniform sampler2D u_SpriteTex;\\nuniform vec2 u_CameraPos;\\nuniform float u_Time;\\nuniform int u_Win;\\n\\nin vec2 fs_Pos;\\nin vec2 fs_UV1;\\nin vec2 fs_UV2;\\n\\nout vec4 out_Col;\\n\\nconst vec2 SEED2 = vec2(0.31415, 0.6456);\\n\\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d){\\n    return a + b*cos( 6.28318*(c*t+d) );\\n}\\n\\nfloat random1(vec2 p) {\\n    return fract(sin(dot(p + SEED2, vec2(127.1, 311.7))) * 43758.5453);\\n}\\n\\nvec2 random2( vec2 p , vec2 seed) {\\n    return fract(sin(vec2(dot(p + seed, vec2(311.7, 127.1)), dot(p + seed, vec2(269.5, 183.3)))) * 85734.3545);\\n}\\n\\nfloat worley(vec2 noisePos, float frequency) {\\n    vec2 point = noisePos * frequency;\\n    vec2 cell = floor(point);\\n\\n    // Check the neighboring cells for the closest cell point\\n    float closestDistance = 2.0;\\n    for (int i = 0; i < 9; i++) {\\n        vec2 curCell = cell + vec2(i % 3 - 1, floor(float(i / 3) - 1.0));\\n        vec2 cellPoint = vec2(curCell) + random2(vec2(curCell), SEED2);\\n        closestDistance = min(closestDistance, distance(cellPoint, point));\\n    }\\n    return clamp(0.0, 1.0, closestDistance);\\n}\\n\\nfloat brownianNoise(vec2 noisePos, vec2 seed) {\\n    vec2 boxPos = vec2(floor(noisePos.x), floor(noisePos.y));\\n\\n    // Get the noise at the corners of the cells\\n    float corner0 = random1(boxPos + vec2(0.0, 0.0));\\n    float corner1 = random1(boxPos + vec2(1.0, 0.0));\\n    float corner2 = random1(boxPos + vec2(0.0, 1.0));\\n    float corner3 = random1(boxPos + vec2(1.0, 1.0));\\n\\n    // Get cubic interpolation factors\\n    float tx = smoothstep(0.0, 1.0, fract(noisePos.x));\\n    float ty = smoothstep(0.0, 1.0, fract(noisePos.y));\\n\\n    // Perform bicubic interpolation\\n    return mix(mix(corner0, corner1, tx), mix(corner2, corner3, tx), ty);\\n}\\n\\nfloat fbm(vec2 noisePos, int numOctaves, float startFrequency) {\\n    float totalNoise = 0.0;\\n    float normalizer = 0.0;\\n    const float PERSISTENCE = 0.5;\\n\\n    float frequency = startFrequency;\\n    float amplitude = PERSISTENCE;\\n\\n    for (int i = 0; i < numOctaves; i++) {\\n        normalizer += amplitude;\\n        totalNoise += brownianNoise(noisePos * frequency, SEED2) * amplitude;\\n        frequency *= 2.0;\\n        amplitude *= PERSISTENCE;\\n    }\\n    return totalNoise / normalizer;\\n}\\n\\nvoid main() {\\n    vec2 uv1 = vec2(fs_UV1.x, clamp(fs_UV1.y, 0.000, 0.249));\\n    vec2 uv2 = vec2(fs_UV2.x, clamp(fs_UV2.y, 0.251, 0.499));\\n    float starRadius = 0.01 + abs(sin(u_Time * 0.01 + random1(fs_Pos) * 100.0)) * 0.01;\\n    vec3 stars = worley(fs_Pos, 10.0) < starRadius ? vec3(1) : vec3(0);\\n    vec4 sky = mix(vec4(0.3, 0.3, 0.25, 1.0), vec4(stars, 1), pow((fs_Pos[1] + 1.0) / 2.0, 0.5));\\n\\n    vec4 layer1 = texture(u_SpriteTex, uv1);\\n    vec4 layer2 = texture(u_SpriteTex, uv2);\\n\\n    if (u_Win == 1) {\\n        float t1 = cos(fs_Pos[0] + fs_Pos[1] + u_Time * 0.01);\\n        float t2 = (sin(-2.0 * fs_Pos[1] + u_Time * 0.01) * cos(2.0 * fs_Pos[0] + u_Time * 0.01));\\n\\n        float t3 = pow(fbm(fs_Pos - vec2(u_Time * 0.005) + vec2(\\n            fbm(fs_Pos + vec2(u_Time * 0.001), 2, 2.5),\\n            worley(fs_Pos, 10.0)\\n        ), \\n        3, 5.0), 2.0);\\n\\n        layer1.rgb = palette(t1, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.33, 0.67)) * 0.2;\\n        layer2.rgb = palette(t2, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.33, 0.67)) * 0.4;\\n        vec3 skyColor = palette(t3, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.33, 0.67)) * 0.8;\\n        sky.rgb = worley(fs_Pos, 10.0) < starRadius ? vec3(1) - skyColor : skyColor;\\n    }\\n\\n    vec4 color = \\n        layer1.a > 0.5 ? layer1 :\\n        layer2.a > 0.5 ? layer2 :\\n        sky;\\n\\n    out_Col = vec4(color.rgb, 1);\\n}\\n\"","import {vec2, vec3} from 'gl-matrix';\nimport GameObject from '../engine/GameObject';\nimport sceneAttributes from './SceneAttributes';\nimport Particle from './Particle';\nimport {spriteCoordinates} from '../constants';\n\nconst WALK_CYCLE_LENGTH: number = 10;\n\nclass Player extends GameObject {\n\n    // Whether or not the player is affecting their jump by holding the jump button\n    jumping: boolean;\n\n    // The amount of time the player has been holding the jump button\n    jumpTime: number;\n\n    // Prevents the player from regrounding the frist frame of a jump\n    groundedImmunity: boolean;\n\n    // The direction the player is currently facing: 1 for right, -1 for left\n    direction: number;\n\n    // The current frame of the player's walk cycle\n    walkFrame: number;\n\n    // Whether or not the player is moving horizontally\n    moving: boolean;\n\n    aPressed: boolean;\n    dPressed: boolean;\n    sPressed: boolean;\n\n    private startPos: vec2;\n    private dead: boolean;\n    private idleTime: number;\n    private zTime: number;\n    private deathTimer: number;\n    win: boolean;\n\n    constructor(_startPos: vec2 | number[]) {\n        super(true, false, true);\n        this.jumping = false;\n        this.groundedImmunity = false;\n        this.direction = 1;\n        this.walkFrame = 0;\n        this.moving = false;\n        this.aPressed = false;\n        this.dPressed = false;\n        this.sPressed = false;\n        this.startPos = vec2.create();\n        vec2.copy(this.startPos, vec2.fromValues(_startPos[0], _startPos[1]));\n        this.setPosition(this.startPos);\n        this.idleTime = 0;\n        this.zTime = 0;\n        this.dead = false;\n        this.deathTimer = 0;\n        this.win = false;\n    }\n\n    onUpdate(delta: number) {\n        if (this.win) {\n            return\n        }\n        if (this.dead) {\n            this.dynamic = false;\n            this.grounded = true;\n            this.deathTimer++;\n            this.direction = this.deathTimer % 20 < 10 ? 1 : -1;\n            if (this.deathTimer > 40 && this.deathTimer < 70) {\n                this.translate([0, (70 - this.deathTimer) * 0.025 - 15.0 / 60]);\n            }\n            if (this.deathTimer > 70) {\n                this.translate([0, -15.0 / 60])\n            }\n        }\n        if (this.jumping) {\n            // I have decided to perform this operation in units of frames instead of seconds to ensure\n            // that the jump height is consistent. It makes geometry generator calculations easier too\n            this.jumpTime -= 0.016;\n            let t = Math.max(0, this.jumpTime / 0.4);\n            this.inputVelocity[1] = t * sceneAttributes.playerJump;\n        }\n        if (this.jumpTime <= 0 || (this.isGrounded && !this.groundedImmunity)) {\n            this.jumping = false;\n        }\n        this.groundedImmunity = false;\n\n        if (!this.aPressed && !this.dPressed || (this.aPressed && this.dPressed)) {\n            this.moving = false;\n        } \n\n        if (this.moving) {\n            this.walkFrame++;\n            let skidThresh = sceneAttributes.playerSpeed / 4\n            if (this.isGrounded && (\n                (this.aPressed && this.getVelocity()[0] > skidThresh) ||\n                (this.dPressed && this.getVelocity()[0] < -skidThresh))\n            ) {\n                let poff1 = new Particle(\n                    spriteCoordinates.SPRITE_POFF,\n                    vec2.fromValues(this.getPosition()[0], this.getPosition()[1] - 0.5),\n                    0.25\n                );\n                poff1.scale(0.5)\n                poff1.setMovement((time: number) => {\n                    poff1.scale(1.03)\n                    return vec2.fromValues(0, time * time * 10);\n                })\n                let poff2 = new Particle(\n                    spriteCoordinates.SPRITE_POFF,\n                    vec2.fromValues(this.getPosition()[0], this.getPosition()[1] - 0.5),\n                    0.25\n                );\n                poff2.scale(0.5)\n                poff2.setMovement((time: number) => {\n                    poff2.scale(1.03)\n                    return vec2.fromValues(0, time * time * 5);\n                })\n            }\n        }\n        else {\n            this.walkFrame = 0;\n        };\n\n        if (this.getPosition()[1] < sceneAttributes.deathHeight) {\n            this.onDeath();\n        }\n\n        if (!this.isGrounded || this.sPressed || this.moving) {\n            this.idleTime = 0;\n        }\n        else {\n            this.idleTime += delta;\n        }\n\n        if (this.idleTime > 20) {\n            if (this.zTime > 2) {\n                let z: Particle = new Particle(\n                    spriteCoordinates.SPRITE_Z,\n                    vec2.fromValues(this.getPosition()[0], this.getPosition()[1]),\n                    3.5\n                )\n                z.setMovement((time: number) => {\n                    if (time > 1) {\n                        z.scale(0.99);\n                    }\n                    return vec2.fromValues(time, Math.sin(time * 3) * 0.3 + time);\n                })\n                this.zTime = 0;\n            }\n            this.zTime += delta;\n        }\n        else {\n            this.zTime = 0;\n        }\n    }\n\n    onGrounded(verticalVelocity: number) {\n        if (verticalVelocity < -40) {\n            let thisPos = this.getPosition();\n            let poff1: Particle = new Particle(\n                spriteCoordinates.SPRITE_POFF,\n                vec2.fromValues(thisPos[0], thisPos[1] - 0.5),\n            3);\n            poff1.setMovement((time: number) => {\n                poff1.scale(1 - time / 3);\n                return vec2.fromValues(4 * time, 5 * time * time);\n            })\n            let poff2: Particle = new Particle(\n                spriteCoordinates.SPRITE_POFF,\n                vec2.fromValues(thisPos[0], thisPos[1] - 0.5),\n            3);\n            poff2.setMovement((time: number) => {\n                poff2.scale(1 - time / 3);\n                return vec2.fromValues(-4 * time, 5 * time * time);\n            })\n        }\n    }\n\n    onKeyPress(key: string) {\n        if (this.dead || this.win) {\n            return;\n        }\n        let playerMovement = this.isGrounded ? sceneAttributes.playerSpeed : sceneAttributes.playerSpeed;\n        if (key === \"a\" || key === \"ArrowLeft\") {\n            vec2.add(this.inputVelocity, this.inputVelocity, vec2.fromValues(-playerMovement, 0));\n            this.direction = -1;\n            this.moving = true;\n        }\n        else if (key === \"d\" || key === \"ArrowRight\") {\n            vec2.add(this.inputVelocity, this.inputVelocity, vec2.fromValues(playerMovement, 0));\n            this.direction = 1;\n            this.moving = true;\n        }\n    }\n\n    onKeyDown(key: string) {\n        if (this.dead || this.win) {\n            return;\n        }\n        if ((key === 'w' || key === \" \" || key === \"ArrowUp\") && this.isGrounded) {\n            this.jumping = true;\n            this.jumpTime = sceneAttributes.maxJumpHold;\n            this.groundedImmunity = true;\n        }\n        else if (key === 'a' || key === \"ArrowLeft\") {\n            this.aPressed = true;\n        }\n        else if (key === 'd' || key === \"ArrowRight\") {\n            this.dPressed = true;\n        }\n        else if (key === 's' || key === \"ArrowDown\") {\n            this.sPressed = true;\n        }\n    }\n\n    onKeyUp(key: string) {\n        if (key === 'w' || key === \" \" || key === \"ArrowUp\") {\n            this.jumping = false;\n            this.jumpTime = 0;\n        }\n        else if (key === 'a' || key === \"ArrowLeft\") {\n            this.aPressed = false;\n        }\n        else if (key === 'd' || key === \"ArrowRight\") {\n            this.dPressed = false;\n        }\n        else if (key === 's' || key === \"ArrowDown\") {\n            this.sPressed = false;\n        }\n    }\n\n    onCollision(other: GameObject) {\n        if (other.constructor.name === \"Coin\") {\n            for (let i = 0; i < 8; i++) {\n                let angle = i * Math.PI * 2 / 8;\n                let direction = vec2.fromValues(Math.cos(angle), Math.sin(angle));\n                let sparkle = new Particle(\n                    spriteCoordinates.SPRITE_SPARKLE,\n                    vec2.add(vec2.create(), other.getPosition(), vec2.scale(vec2.create(), direction, 0.3)),\n                    0.2\n                );\n                sparkle.setSize(0.5);\n                sparkle.setMovement((time: number) => {\n                    return vec2.scale(vec2.create(), direction, time * 2);\n                })\n            }\n            other.destroy();\n        }\n        else if (other.constructor.name === \"Spike\" || other.constructor.name === \"Baddie\") {\n            this.dead = true;\n        }\n        else if (other.constructor.name === \"Checkpoint\") {\n            vec2.copy(this.startPos, other.getPosition());\n        }\n        else if (other.constructor.name === \"Gem\") {\n            this.win = true;\n        }\n    }\n\n    onDeath() {\n        this.setPosition(this.startPos);\n        this.dead = false;\n        this.dynamic = true;\n        this.deathTimer = 0;\n    }\n\n    getSpriteUv() {\n        if (this.dead) {\n            return spriteCoordinates.SPRITE_PLAYER_DEATH;\n        }\n        if (!this.isGrounded) {\n            return spriteCoordinates.SPRITE_PLAYER_JUMP;\n        }\n        else if (this.moving) {\n            return this.walkFrame % WALK_CYCLE_LENGTH < WALK_CYCLE_LENGTH / 2 ?\n                spriteCoordinates.SPRITE_PLAYER_WALK_1 : \n                spriteCoordinates.SPRITE_PLAYER_WALK_2;\n        }\n        else if (this.sPressed) {\n            return spriteCoordinates.SPRITE_PLAYER_CROUCH;\n        }\n        else if (this.idleTime >= 20) {\n            return spriteCoordinates.SPRITE_PLAYER_IDLE2;\n        }\n        else if (this.idleTime >= 10) {\n            return spriteCoordinates.SPRITE_PLAYER_IDLE1;\n        }\n        return spriteCoordinates.SPRITE_PLAYER_STAND;\n    }\n}\n\nexport default Player;","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.Stats=t()}(this,function(){\"use strict\";var c=function(){var n=0,l=document.createElement(\"div\");function e(e){return l.appendChild(e.dom),e}function t(e){for(var t=0;t<l.children.length;t++)l.children[t].style.display=t===e?\"block\":\"none\";n=e}l.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\",l.addEventListener(\"click\",function(e){e.preventDefault(),t(++n%l.children.length)},!1);var i=(performance||Date).now(),a=i,o=0,f=e(new c.Panel(\"FPS\",\"#0ff\",\"#002\")),r=e(new c.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var d=e(new c.Panel(\"MB\",\"#f08\",\"#201\"));return t(0),{REVISION:16,dom:l,addPanel:e,showPanel:t,begin:function(){i=(performance||Date).now()},end:function(){o++;var e=(performance||Date).now();if(r.update(e-i,200),a+1e3<=e&&(f.update(1e3*o/(e-a),100),a=e,o=0,d)){var t=performance.memory;d.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){i=this.end()},domElement:l,setMode:t}};return c.Panel=function(n,l,i){var a=1/0,o=0,f=Math.round,r=f(window.devicePixelRatio||1),d=80*r,e=48*r,c=3*r,p=2*r,u=3*r,s=15*r,m=74*r,h=30*r,y=document.createElement(\"canvas\");y.width=d,y.height=e,y.style.cssText=\"width:80px;height:48px\";var v=y.getContext(\"2d\");return v.font=\"bold \"+9*r+\"px Helvetica,Arial,sans-serif\",v.textBaseline=\"top\",v.fillStyle=i,v.fillRect(0,0,d,e),v.fillStyle=l,v.fillText(n,c,p),v.fillRect(u,s,m,h),v.fillStyle=i,v.globalAlpha=.9,v.fillRect(u,s,m,h),{dom:y,update:function(e,t){a=Math.min(a,e),o=Math.max(o,e),v.fillStyle=i,v.globalAlpha=1,v.fillRect(0,0,d,s),v.fillStyle=l,v.fillText(f(e)+\" \"+n+\" (\"+f(a)+\"-\"+f(o)+\")\",c,p),v.drawImage(y,u+r,s,m-r,h,u,s,m-r,h),v.fillRect(u+m-r,s,r,h),v.fillStyle=i,v.globalAlpha=.9,v.fillRect(u+m-r,s,r,f((1-e/t)*h))}}},c});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"dist/\";","import {vec2, vec3} from 'gl-matrix';\n\nimport {setGL} from './globals';\nimport OpenGLRenderer from './rendering/gl/OpenGLRenderer';\nimport ShaderProgram, {Shader} from './rendering/gl/ShaderProgram';\nimport Camera from './Camera';\nimport GameEngine from './engine/GameEngine';\nimport GameObject from './engine/GameObject';\n\nimport Player from './scene/Player';\nimport Coin from './scene/Coin';\nimport sceneAttributes from './scene/SceneAttributes';\n\nimport RhythmGropuGenerator from './LevelGenerator/RhythmGroupGenerator';\n\nlet Stats = require(\"stats-js\")\n\nlet time: number = 0.0;\nlet gameStart: boolean = false;\n\nfunction main() {\n\n    // Rhythm Type\n    let rhythmTypeSelect = <HTMLSelectElement> document.getElementById(\"rhythmSelect\");\n    rhythmTypeSelect.onchange = () => {\n        sceneAttributes.rhythmType = parseInt(rhythmTypeSelect.value);\n    }\n\n    // Rhythm Group Length\n    let groupLengthSlider = <HTMLInputElement> document.getElementById(\"timeSelect\");\n    let groupLengthOutput = document.getElementById(\"timeSelectDisplay\");\n    groupLengthOutput.innerHTML = groupLengthSlider.value + \" sec\";\n    groupLengthSlider.oninput = () => {\n        groupLengthOutput.innerHTML = groupLengthSlider.value + \" sec\";\n        sceneAttributes.rhythmGroupLength = parseInt(groupLengthSlider.value);\n    }\n\n    // Rhythm Group Number\n    let groupNumberSelect = <HTMLInputElement> document.getElementById(\"numberSelect\");\n    let groupNumberOutput = document.getElementById(\"numberDisplay\");\n    groupNumberOutput.innerHTML = groupNumberSelect.value;\n    groupNumberSelect.oninput = () => {\n        groupNumberOutput.innerHTML = groupNumberSelect.value;\n        sceneAttributes.numberOfGroups = parseInt(groupNumberSelect.value);\n    }\n\n    // Gravity\n    let gravitySelect = <HTMLSelectElement> document.getElementById(\"gravitySelect\");\n    gravitySelect.onchange = function() {\n        sceneAttributes.gravity = parseFloat(gravitySelect.value);\n    }\n\n    // Jump\n    let jumpSelect = <HTMLSelectElement> document.getElementById(\"jumpSelect\");\n    jumpSelect.onchange = () => {\n        sceneAttributes.playerJump = parseFloat(jumpSelect.value);\n    }\n\n    // Speed\n    let speedSelect = <HTMLSelectElement> document.getElementById(\"speedSelect\");\n    speedSelect.onchange = () => {\n        sceneAttributes.playerSpeed = parseFloat(speedSelect.value);\n    }\n\n    // Density\n    let densitySelect = <HTMLSelectElement> document.getElementById(\"densitySelect\");\n    densitySelect.onchange = () => {\n        sceneAttributes.levelDensity = parseFloat(densitySelect.value);\n    }\n\n    // Generate Level\n    let startButton = <HTMLButtonElement> document.getElementById(\"generateLevelButton\");\n    startButton.onclick = () => {\n        document.body.innerHTML = \"\";\n        BeginGame();\n    }\n\n    //BeginGame();\n}\n\nfunction BeginGame() {\n    let canvas = document.createElement(\"canvas\");\n    canvas.setAttribute(\"id\", \"canvas\");\n\n    document.body.appendChild(canvas);\n\n    // get canvas and webgl context\n    //const canvas = <HTMLCanvasElement> document.getElementById('canvas');\n    const gl = <WebGL2RenderingContext> canvas.getContext('webgl2');\n    if (!gl) {\n        alert('WebGL 2 not supported!');\n    }\n    setGL(gl);\n\n    // Initial display for framerate (only for development)\n    let displayStats = false;\n    const stats = Stats();\n    if (window.location.hostname === \"localhost\") {\n        displayStats = true;\n        stats.setMode(0);\n        stats.domElement.style.position = 'absolute';\n        stats.domElement.style.left = '0px';\n        stats.domElement.style.top = '0px';\n        document.body.appendChild(stats.domElement);\n    }\n\n    let engine: GameEngine = GameEngine.getEngine();\n    const camera: Camera = engine.getCamera();\n\n    const renderer = new OpenGLRenderer(canvas);\n    renderer.setClearColor(0.9, 0.9, 0.9, 1);\n    engine.setRenderer(renderer);\n    engine.generateLevel();\n    let player: Player = new Player([0, 1]);\n    camera.makeParent(player);\n    //new RhythmGropuGenerator(20, 20, 0.5, 0.6, [1, 0, 0]).generateRhythmGroup();\n\n    // This function will be called every frame\n    function tick() {\n        if (displayStats) {\n            stats.begin();\n        }\n        time++;\n        engine.tick();\n\n        gl.viewport(0, 0, window.innerWidth, window.innerHeight);\n        renderer.clear();\n        GameEngine.getEngine().drawGameObjects();\n    \n        // Tell the browser to call `tick` again whenever it renders a new frame\n        if (displayStats) {\n            stats.end();\n        }\n        requestAnimationFrame(tick);\n    }\n  \n    window.addEventListener('resize', function() {\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        camera.setAspectRatio(window.innerWidth / window.innerHeight);\n        camera.updateProjectionMatrix();\n    }, false);\n  \n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.setAspectRatio(window.innerWidth / window.innerHeight);\n    camera.updateProjectionMatrix();\n\n    // Start the render loop\n    engine.startGame();\n    tick();\n}\n\nmain();"],"names":[],"sourceRoot":""}